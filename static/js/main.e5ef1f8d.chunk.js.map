{"version":3,"sources":["routes/Error404/Error404.js","services/ConfigServices.js","services/GestorServices.js","routes/Home/HomeController.js","data/EntitiesView.js","routes/Home/HomeView.js","routes/Home/index.js","routes/Test/TestController.js","components/ButtonField/ButtonField.js","components/TextField/TextField.js","components/CheckboxField/CheckboxField.js","components/RadioButtonField/RadioButtonField.js","components/SelectListField/SelectListField.js","components/TableField/ContentTable.js","components/TableField/TableField.js","routes/Test/TestView.js","routes/Test/index.js","services/GestorUtilitarios.js","routes/Vehicles/VehiclesModel.js","routes/Vehicles/VehiclesController.js","components/TitleSeccionField/TitleSectionField.js","components/NumberField/NumberField.js","components/FileImgFiled/FileImgField.js","routes/Vehicles/VehiclesView.js","routes/Vehicles/index.js","routes/SubTrademark/SubTrademarkModel.js","routes/SubTrademark/SubTrademarkController.js","routes/SubTrademark/SubTrademarkView.js","routes/SubTrademark/index.js","routes/Quotes/QuotesModel.js","routes/Quotes/QuotesController.js","routes/Quotes/QuotesView.js","routes/routes.js","components/MenuBar/MenuBar.js","routes/index.js","serviceWorker.js","index.js"],"names":["Error404","Component","protocol","host","hostCloud","ConfigServicesSQl","typeQuery","nameServiceSQl","URL","timer","GestorServices","urlReq","this","buildUrlServiceSQL","parametros","Promise","resolve","reject","$","ajax","data","url","type","beforeSend","success","response","console","log","Correcto","mensaje","listaResultado","error","xhr","status","complete","Consulta","configServicesSQl","require","EntitiesView","SeccionMarcas","TituloSeccion","listaMarcas","tagComponent","optionsList","NombreMarca","placeholder","isRequired","Capacidad","tagValue","defaultValue","Motor","Cilindrada","btnGuardar","texto","btnCancelar","tableSubMarcas","head","SeccionVehiculos","listaSubMarcas","listaColores","value","name","tag","PrecioUnitario","PlacaControl","Chasis","AnioModelo","btnGuardarVehicle","btnCancelarVehicle","tableVehiculos","SeccionCotizaciones","TipoVenta","radiosList","id","group","activo","TableQuotes","obtenerEntidadForView","EntidadSecc","Object","assign","View","props","nextProps","nextState","prevProps","prevState","defaultProps","uuid","ButtonField","state","visible","enabled","onClick","funcionClick","bind","undefined","setState","hidden","className","disabled","TextField","onChangeField","valor","document","getElementById","idField","req","htmlFor","onChange","CheckboxField","checksList","onClickCheck","armarChecks","validateClick","setingValue","arr","i","push","map","itemCh","numCh","active","key","defaultChecked","val","duplicate","length","j","indexOf","splice","MiComponente","onClickRadio","armarRadios","onClickedRadio","forVal","itemR","numR","SelectListField","defaultSelected","onClickOption","armarOptions","onSelectedOption","concat","itemOp","numOp","ref","selectBox","selectedValue","options","selectedIndex","ContentTable","listaContenido","identificadorUnico","forUpdate","forDelete","onClickItemTable","armarRowTable","clickItemTable","itemL","arrCont","prop","itemC","numC","alt","src","width","height","action","idL","TableField","identificador","onClickItem","armarCabecera","armarContenido","handleItem","forHead","itemH","numH","scope","testSQLForData","testSQLABM","testClickRadio","testValueRadios","testOnClickOptions","testValOptions","guardarTestTable","traerDataTestTable","testRetornoNietoTable","validarCamposTable","gestorServices","ExecuteSimpleQuery","then","pRespAJAX","probarSQLForData","pResp","consulta","v4","probarSQLABM","refs","MisRadios","opts","self","pRespDataTT","DataTableTest","pRespDATATT","lista","dataTest","arrReturn","objData","consultaInsert","pRespInsert","GUARDAR","href","TestView","obtenerFechaHoraActual","date","Date","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","Model","datos","idVehicle","idSubMarca","color","precioU","placa","chasis","anio","TitleSectionField","onHandleImg","split1","split","file","accept","EntityView","validadorCampos","obtenerListaSubMarcas","armarListadoSubMarks","guardarVehiculo","vaciarCampos","obtenerVehiculos","refsObligatorios","objRetorno","correcto","obtenerSubMarks","pRespsubMaeksDB","Mensaje","ObtenerSubMarcas","pRespSubMarksController","listSubMarks","alertify","alert","message","arrRet","id_sub_trademark","name_sub_trademark","validador","listColors","parseFloat","parseInt","confirm","Modelo","insertQuery","insertarRegistroVehiculo","pRespSaveVehicleDB","pRespSaveController","warning","actionButton","obtenerDataVehicles","pRespVehiclesDB","ObtenerDatosVehiculos","pRespVehiclesController","tableVehicles","marca","capacidad","cilindros","idSubMark","nombre","motor","guardarMarca","obtenerMarcas","armarListadoMarks","obtenerSubmarcas","obtenerListaMarcas","pRespMarcas","ObtenerListaMarcas","pRespMarcasController","listMarks","pRespSTDB","ObtenerListaSubMarcas","pRespSTControl","tablaMarcas","capacity","cilin","insertarRegistroMarca","pRespDBSave","id_trademark","name_trademark","tipo","ObtenerListaCredito","ObtenerPorCredito","pRespDBCredito","typeReport","obtenerListaCredito","onClickTipo","tipoQuote","pRespControllerCredito","dataQuotes","urlReport","routes","path","component","Home","Test","Vehicles","SubTrademark","showItemsNav","showItemsReports","showItemsSales","toggleNav","toggleReports","toogleSale","to","App","topToMenu","window","screen","style","margin","fallback","loading","route","idRoute","exact","Boolean","location","hostname","match","MAIN_NODE","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.e5ef1f8d.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nclass Error404 extends Component {\r\n\r\n    render () {\r\n        return (\r\n            <div>Pagina no encontrada, error 404 :(</div>\r\n        )\r\n    }\r\n\r\n}\r\nexport default Error404","/**\r\n * Created by Williams on 17/2/2020.\r\n */\r\n//Variable debe ser tru si llama al backend publico o false si llama al backend local\r\nconst PUBLICA = true\r\n\r\nvar protocol = 'http'\r\nvar host = '192.168.0.105'\r\nconst port = '80'\r\nconst nameBackSQL = 'ShopCar'\r\nconst nameServiceSQlForData = 'ForDataQuery'\r\nconst nameServiceSQlABM = 'ABMQuery'\r\nconst nameServiceReport = 'Reports/LinksReports'\r\n\r\n// Config aplicacion en la nube\r\nconst protocolCloud = 'https'\r\nconst hostCloud = 'examenfinalwil.000webhostapp.com'\r\n\r\nexport function ConfigServicesSQl (typeQuery = 'select') {\r\n    let nameServiceSQl = nameServiceSQlForData\r\n    if (typeQuery === 'insertar' || typeQuery === 'modificar' || typeQuery === 'eliminar') {\r\n        nameServiceSQl = nameServiceSQlABM\r\n    }\r\n    let nameService = nameBackSQL + '/' + nameServiceSQl + '/'\r\n    let URLConexion = protocol + '://' + host + ':' + port + '/' + nameService\r\n    if (PUBLICA) {\r\n        protocol = protocolCloud\r\n        host = hostCloud\r\n        nameService = nameServiceSQl + '/'\r\n        URLConexion = protocol + '://' + host + '/' + nameService\r\n    }\r\n    return {\r\n        URL: URLConexion,\r\n        timer: 60000\r\n    }\r\n\r\n}\r\n\r\nexport function ConfigServicesReports () {\r\n    let URLReturn = (PUBLICA)\r\n        ? protocol + '://' + host + '/' + nameBackSQL + '/' + nameServiceReport + '/'\r\n        : protocol + '://' + host + ':' + port + '/' + nameBackSQL + '/' + nameServiceReport + '/'\r\n    return URLReturn\r\n}","/**\r\n * Created by Williams on 17/2/2020.\r\n */\r\nimport $ from 'jquery'\r\n\r\n\r\nimport { ConfigServicesSQl } from './ConfigServices.js'\r\n\r\nexport default class GestorServices {\r\n\r\n    constructor() {\r\n\r\n    }\r\n\r\n    testingAjaxRequest () {\r\n        let urlReq = this.buildUrlServiceSQL()\r\n        var parametros = { //cada par�metro se pasa con un nombre en un array asociativo\r\n            \"sql\": 'SELECT * FROM vehicle'\r\n        }\r\n        return new Promise(function (resolve, reject) {\r\n\r\n            $.ajax({\r\n                data: parametros,//los parametros se pasan poresta variable\r\n                url: urlReq,\r\n                type: 'post',\r\n                beforeSend: function () {//elemento que queramos poner mientras ajax carga\r\n                    //$(\"#resultado\").html(\"Procesando, espere por favor...\");\r\n                },\r\n                success: function (response) {//resultado de la funci�n\r\n                    //$(\"#resultado\").html(response);\r\n                    console.log('WWWW', response)\r\n                    resolve({\r\n                        Correcto: true,\r\n                        mensaje: 'Respuesta a la promesa',\r\n                        listaResultado: response\r\n                    })\r\n                },\r\n                error: function (xhr, status) {\r\n                    //console.log('Algo salio mal', xhr, 'State: ', status)\r\n                },\r\n                complete : function(xhr, status) {\r\n                    console.log('Se hizo la peticion para bien o para mal', xhr, 'State: ', status)\r\n                }\r\n            });\r\n        })\r\n    }\r\n\r\n    ExecuteSimpleQuery (Consulta = '', type = 'select') {\r\n        let urlReq = this.buildUrlServiceSQL(type)\r\n        var parametros = { //cada par�metro se pasa con un nombre en un array asociativo\r\n            \"sql\": Consulta\r\n        }\r\n        return new Promise(function (resolve, reject) {\r\n\r\n            $.ajax({\r\n                data: parametros,//los parametros se pasan poresta variable\r\n                url: urlReq,\r\n                type: 'post',\r\n                beforeSend: function () {\r\n                    //elemento que queramos poner mientras ajax carga\r\n                },\r\n                success: function (response) {//resultado de la funci�n\r\n                    // Esta parte se ejecuta si se hizo una correcta perticion a l back, y\r\n                    // valida asi el funcionamiento correcto del back\r\n                    // console.log('RespAjax', response)\r\n                    resolve(response)\r\n                },\r\n                error: function (xhr, status) {\r\n                    // Esto se ejecuta si se hizo una incorrecta peticion al back\r\n                    console.log('Algo salio mal', xhr, 'State: ', status)\r\n                },\r\n                complete : function(xhr, status) {\r\n                    // Esto se ejecuta ya se haya realizado por success o por error en la\r\n                    // respuesta a la peticion.\r\n                    // console.log('Se hizo la peticion para bien o para mal', xhr, 'State: ', status)\r\n                }\r\n            });\r\n        })\r\n    }\r\n\r\n    // Funcion que arma la URL del backend que se consumira\r\n    buildUrlServiceSQL (type = 'select') {\r\n        let configServicesSQl = ConfigServicesSQl(type)\r\n        return configServicesSQl.URL\r\n    }\r\n\r\n}","/**\r\n * Created by Williams on 21/2/2020.\r\n */\r\nimport GestorServices from './../../services/GestorServices.js'\r\nimport Model from './HomeModel.js'\r\n\r\nvar uuid = require('uuid')\r\n\r\nexport function GUARDAR (val = '') {\r\n\r\n    let id = uuid.v4()\r\n\r\n    return new Promise((resolve, reject) => {\r\n        resolve({\r\n            mensaje: val\r\n        })\r\n    })\r\n}\r\n","/**\r\n * Created by Williams on 3/3/2020.\r\n */\r\nlet EntitiesView = {\r\n    SeccionMarcas: {\r\n        TituloSeccion: 'Seccion Marcas',\r\n        listaMarcas: {\r\n            tagComponent: 'Seleccione una marca',\r\n            optionsList: []\r\n        },\r\n        NombreMarca: {\r\n            tagComponent: 'Nombre',\r\n            placeholder: 'Nombre...',\r\n            isRequired: true\r\n        },\r\n        Capacidad: {\r\n            tagComponent: 'Capacidad',\r\n            tagValue: 'personas',\r\n            defaultValue: 5\r\n        },\r\n        Motor: {\r\n            tagComponent: 'Motor',\r\n            placeholder: 'Motor...',\r\n            isRequired: true\r\n        },\r\n        Cilindrada: {\r\n            tagComponent: 'Cilindrada',\r\n            tagValue: 'c.c.',\r\n            defaultValue: 1500\r\n        },\r\n        btnGuardar: {\r\n            texto: 'Guardar',\r\n            type: 'primary'\r\n        },\r\n        btnCancelar: {\r\n            texto: 'Cancelar',\r\n            type: 'danger'\r\n        },\r\n        tableSubMarcas: {\r\n            tagComponent: 'Lista de marcas y modelos',\r\n            head: [\r\n                'Id Marca', 'Nombre marca', 'Nombre modelo', '# pasajeros', 'Cilindrada'\r\n            ],\r\n            data: []\r\n        }\r\n    },\r\n    SeccionVehiculos: {\r\n        TituloSeccion: 'Seccion Vehiculos',\r\n        listaSubMarcas: {\r\n            tagComponent: 'Seleccione un modelo',\r\n            optionsList: []\r\n        },\r\n        listaColores: {\r\n            tagComponent: 'Seleccione un color',\r\n            optionsList: [\r\n                { value: 'Rojo', name: 'Rojo', tag: 'Rojo' },\r\n                { value: 'Azul', name: 'Azul', tag: 'Azul' },\r\n                { value: 'Verde claro', name: 'Verde claro', tag: 'Verde claro' },\r\n                { value: 'Verde Oscuro', name: 'Verde Oscuro', tag: 'Verde Oscuro' },\r\n                { value: 'Negro', name: 'Negro', tag: 'Negro' },\r\n                { value: 'Blanco', name: 'Blanco', tag: 'Blanco' },\r\n                { value: 'Gris', name: 'Gris', tag: 'Gris' },\r\n                { value: 'Beige', name: 'Beige', tag: 'Beige' },\r\n                { value: 'Cafe', name: 'Cafe', tag: 'Cafe' }\r\n            ]\r\n        },\r\n        PrecioUnitario: {\r\n            tagComponent: 'Precio Unitario',\r\n            tagValue: 'Dolares americanos',\r\n            defaultValue: 20000\r\n        },\r\n        PlacaControl: {\r\n            tagComponent: 'Placa de Control',\r\n            placeholder: 'Placa de Control...',\r\n            isRequired: true\r\n        },\r\n        Chasis: {\r\n            tagComponent: 'Serie de Chasis',\r\n            placeholder: 'Serie de Chasis...',\r\n            isRequired: true\r\n        },\r\n        AnioModelo: {\r\n            tagComponent: 'A\\u00F1o de Modelo',\r\n            tagValue: '',\r\n            defaultValue: 2020\r\n        },\r\n        btnGuardarVehicle: {\r\n            texto: 'Guardar',\r\n            type: 'success'\r\n        },\r\n        btnCancelarVehicle: {\r\n            texto: 'Cancelar',\r\n            type: 'danger'\r\n        },\r\n        tableVehiculos: {\r\n            tagComponent: 'Lista de Vehiculos',\r\n            head: [\r\n                'Nombre marca', 'Nombre modelo', 'Color', 'A\\u00F1o', 'Precio $US'\r\n            ],\r\n            data: []\r\n        }\r\n    },\r\n    SeccionCotizaciones: {\r\n        TituloSeccion: 'Seccion Cotizaciones',\r\n        TipoVenta: {\r\n            tagComponent: 'Filtrar tipo de cotizacion por:',\r\n            radiosList: [\r\n                { id: 'todos', tag: 'Todos', value: 'todos', group: 'tipoQuote', activo: true },\r\n                { id: 'credito', tag: 'Credito', value: 'credito', group: 'tipoQuote' },\r\n                { id: 'contado', tag: 'Contado', value: 'contado', group: 'tipoQuote' }\r\n            ]\r\n        },\r\n        TableQuotes: {\r\n            tagComponent: 'Lista de cotizaciones',\r\n            head: ['Nombre Marca', 'Nombre Modelo', 'A\\u00F1o', 'Precio'],\r\n            data: []\r\n        }\r\n    }\r\n}\r\n\r\nexport function obtenerEntidadForView (EntidadSecc) {\r\n        // Obtiene un objeto clonado de la entidad que se necesita\r\n        let objetoEntityView = Object.assign({}, EntitiesView[EntidadSecc])\r\n        return objetoEntityView\r\n}","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n//Seccion que carga el archivo que realiza los estilos\r\nimport './Home.scss'\r\n\r\n//Seccion para instanciar gestores e importar funciones del controller\r\nimport {\r\n    GUARDAR\r\n} from './HomeController.js'\r\n\r\n//Seccion para importar componentes\r\n\r\n//Seccion para importar la funcion que retorna la entidad del view\r\nimport { obtenerEntidadForView } from './../../data/EntitiesView.js'\r\n//constante que treara el objeto entidad para esta vista, para mandar a los props de los componentes\r\nconst EntityView = obtenerEntidadForView('Home')\r\n\r\nclass View extends Component {\r\n\r\n    static propTypes = {\r\n\r\n    }\r\n\r\n    constructor (props) {\r\n        // console.log('constructorView')\r\n        super(props)\r\n\r\n        // bindeo para funciones y metodos\r\n    }\r\n\r\n    static defaultProps = {\r\n\r\n    }\r\n\r\n    componentWillMount(){\r\n        //console.log('componentWillMountView')\r\n    }\r\n\r\n    componentDidMount(){\r\n        //console.log('componentDidMountView')\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState){\r\n        //console.log('shouldComponentUpdateView', nextProps, nextState)\r\n        return true\r\n    }\r\n\r\n    componentWillUpdate(nextProps, nextState){\r\n        //console.log('componentWillUpdateView', nextProps, nextState)\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState){\r\n        //console.log('componentDidUpdateView', prevProps, prevState)\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        //console.log('componentWillUnmountView')\r\n    }\r\n\r\n    render () {\r\n        //console.log('renderView', this)\r\n        return (\r\n            <div>\r\n                View Home\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\nexport default View","/**\r\n * Created by Williams on 17/2/2020.\r\n */\r\nimport View from './HomeView.js'\r\nexport default View","import GestorServices from './../../services/GestorServices.js'\r\nimport Model from './TestModel.js'\r\n\r\nvar uuid = require('uuid')\r\n\r\nexport function GUARDAR (val = '') {\r\n\r\n    let id = uuid.v4()\r\n\r\n    let consultaInsert = 'INSERT INTO tabletest (id_test, fecha_test, campo_fecha, campo_hora, ' +\r\n        ' campo_entero, campo_decimal, campo_flotante, campo_bool, campo_max_text) ' +\r\n        ' VALUES ( ' + `'` + id + `', ` + 'NOW()' + `, ` + 'NOW()' + `, ` + `'` + '15:00' + `', ` +\r\n        200 + ', ' + 100.1234 + ', ' + 42.5633 + ', ' + 1 + ', ' + `'` + 'WWWWWW' + `'` + ') '\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n        let gestorServices = new GestorServices()\r\n\r\n        gestorServices.ExecuteSimpleQuery(consultaInsert, 'insertar')\r\n            .then((pRespInsert) => {\r\n                console.log('pRespInsert', pRespInsert)\r\n                resolve(pRespInsert)\r\n            })\r\n    })\r\n}\r\n\r\nexport function DataTableTest () {\r\n\r\n    let gestorServices = new GestorServices()\r\n    //let consulta = 'select * from tabletest'\r\n    let consulta = 'select * from test'\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n        gestorServices.ExecuteSimpleQuery(consulta)\r\n            .then((pRespDataTT) => {\r\n                resolve(pRespDataTT)\r\n            })\r\n\r\n    })\r\n\r\n\r\n}\r\n\r\nexport function probarSQLForData () {\r\n    let consulta = 'select * from test'\r\n\r\n    let gestorServices = new GestorServices()\r\n    return new Promise((resolve, reject) => {\r\n        gestorServices.ExecuteSimpleQuery(consulta)\r\n            .then(function(pRespAJAX){\r\n                console.log('pRespAJAX', pRespAJAX)\r\n                resolve(pRespAJAX)\r\n            })\r\n\r\n    })\r\n}\r\n\r\nexport function probarSQLABM () {\r\n    let idtest = uuid.v4()\r\n\r\n    let consulta = 'INSERT INTO test (id_test, fecha_test) VALUES ' +\r\n        ' ( ' + `'` + idtest + `'` + ', NOW() ) '\r\n\r\n    let gestorServices = new GestorServices()\r\n\r\n    return new Promise((resolve, reject) => {\r\n        gestorServices.ExecuteSimpleQuery(consulta, 'insertar')\r\n            .then(function(pRespAJAX){\r\n                console.log('pRespAJAX', pRespAJAX)\r\n                resolve(pRespAJAX)\r\n            })\r\n\r\n    })\r\n}\r\n","/**\r\n * Created by Williams on 12/2/2020.\r\n */\r\nimport React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport './ButtonField.scss'\r\n\r\nclass ButtonField extends Component {\r\n\r\n    /*TODO estados y propiedades del componente*/\r\n    /*\r\n    * visible-> bool que muestra u oculta el componente\r\n    * texto-> string que muestra el texto que tendra el boton\r\n    * enabled-> bool que habilita o no el componente\r\n    * type-> tipo de boton para los estilos (success, primary, default, warning, danger)\r\n    * onClick-> Funcion que ejecutara en el padre\r\n    * */\r\n\r\n    static propTypes = {\r\n        visible: PropTypes.bool,\r\n        texto: PropTypes.string,\r\n        enabled: PropTypes.bool,\r\n        type: PropTypes.string,\r\n        onClick: PropTypes.func\r\n    }\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            visible: this.props.visible,\r\n            texto: this.props.texto,\r\n            enabled: this.props.enabled,\r\n            type: this.props.type,\r\n            onClick: this.props.onClick\r\n        }\r\n        this.funcionClick = this.funcionClick.bind(this)\r\n    }\r\n\r\n    static defaultProps = {\r\n        visible: true,\r\n        texto: 'boton',\r\n        enabled: true,\r\n        type: 'default'\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps){\r\n        if (nextProps.visible !== null && nextProps.visible !== undefined) {\r\n            this.setState({ visible: nextProps.visible })\r\n        }\r\n        if (nextProps.enabled !== null && nextProps.enabled !== undefined) {\r\n            this.setState({ enabled: nextProps.enabled })\r\n        }\r\n        if (nextProps.texto !== null && nextProps.texto !== undefined) {\r\n            this.setState({ texto: nextProps.texto })\r\n        }\r\n        if (nextProps.type !== null && nextProps.type !== undefined) {\r\n            this.setState({ type: nextProps.type })\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState){\r\n        //console.log('shouldComponentUpdateComponent', nextProps, nextState)\r\n        return true\r\n    }\r\n\r\n    funcionClick () {\r\n        console.log('presiono el boton Funcion en el componente boton')\r\n        if(this.state.onClick !== undefined && this.state.onClick !== null){\r\n            this.state.onClick()\r\n        }\r\n    }\r\n\r\n    render(){\r\n\r\n        return(\r\n            <div hidden={!this.state.visible} className=\"general-boton\">\r\n                <button id=\"button\" className={this.state.type + ' general-button border'}\r\n                    onClick={this.funcionClick}\r\n                    disabled={!this.state.enabled} >\r\n                    {this.state.texto}\r\n                </button>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\nexport default ButtonField","/**\r\n * Created by Williams on 18/2/2020.\r\n */\r\nimport React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n//Seccion que importa los estilos del componente\r\nimport './TextField.scss'\r\n\r\nclass TextField extends Component {\r\n\r\n    /*TODO estados y propiedades del componente*/\r\n    /*\r\n     * visible-> bool que muestra u oculta el componente\r\n     * tagComponent-> string que muestra el texto que sobre el campo (label)\r\n     * enabled-> bool que habilita o no el componente\r\n     * value-> valor que pondra en user\r\n     * isRequired-> tipo de entrada para los estilos (obligatorio o no)\r\n     * placeholder-> prop que se pondra en el campo para que empiece\r\n     * */\r\n\r\n    static propTypes = {\r\n        tagComponent: PropTypes.string,\r\n        visible: PropTypes.bool,\r\n        value: PropTypes.oneOfType([\r\n            PropTypes.string,\r\n            PropTypes.number\r\n        ]),\r\n        placeholder: PropTypes.oneOfType([\r\n            PropTypes.string,\r\n            PropTypes.number\r\n        ]),\r\n        isRequired: PropTypes.bool,\r\n        enabled: PropTypes.bool\r\n    }\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            tagComponent: this.props.tagComponent,\r\n            visible: this.props.visible,\r\n            value: this.props.value,\r\n            placeholder: this.props.placeholder,\r\n            isRequired: this.props.isRequired,\r\n            enabled: this.props.enabled\r\n        }\r\n        // bindeo para funciones y metodos\r\n        this.onChangeField = this.onChangeField.bind(this)\r\n    }\r\n\r\n    static defaultProps = {\r\n        tagComponent: '',\r\n        visible: true,\r\n        value: '',\r\n        placeholder: '',\r\n        isRequired: false,\r\n        enabled: true\r\n    }\r\n\r\n    componentWillMount(){\r\n        //console.log('componentWillMountComponent')\r\n    }\r\n\r\n    componentDidMount(){\r\n        //console.log('componentDidMountComponent')\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps){\r\n        //console.log('componentWillReceiveProps', nextProps)\r\n        if (nextProps.visible !== null) {\r\n            if (nextProps.visible) {\r\n                this.setState({ visible: true })\r\n            } else {\r\n                this.setState({ visible: false })\r\n            }\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState){\r\n        //console.log('shouldComponentUpdateComponent', nextProps, nextState)\r\n        return true\r\n    }\r\n\r\n    componentWillUpdate(nextProps, nextState){\r\n        //console.log('componentWillUpdateComponent', nextProps, nextState)\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState){\r\n        //console.log('componentDidUpdateComponent', prevProps, prevState)\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        //console.log('componentWillUnmountComponent')\r\n    }\r\n\r\n    onChangeField () {\r\n        // console.log('onChangeField', this.props.idField)\r\n        let valor = document.getElementById(this.props.idField).value\r\n        // console.log('CambioTextField', valor)\r\n        this.setState({ value: valor })\r\n        //console.log('VVVVVV', this.state.value)\r\n        if (valor !== '') {\r\n            // console.log('con datos')\r\n            this.setState({ isRequired: false })\r\n        } else {\r\n            // console.log('vacio', this.props.isRequired)\r\n            if (this.props.isRequired) {\r\n                this.setState({ isRequired: true })\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    render () {\r\n        let req = (this.state.isRequired) ? 'is-req' : 'no-req'\r\n\r\n        return (\r\n            <div hidden={!this.state.visible} className=\"general-text\" >\r\n                {\r\n                    (this.props.tagComponent !== '')\r\n                    ?\r\n                        <label htmlFor={this.props.idField} className={'general-comp general-label'}>\r\n                            {this.props.tagComponent}\r\n                        </label>\r\n                    : null\r\n                }\r\n\r\n                <input className={this.state.type + ' general-comp general-textfield ' + req + ' border-text'}\r\n                    id={this.props.idField}\r\n                    type=\"text\"\r\n                    value={this.state.value}\r\n                    placeholder={this.props.placeholder}\r\n                    disabled={!this.state.enabled}\r\n                    onChange={this.onChangeField} />\r\n\r\n                {\r\n                    (this.state.isRequired)\r\n                    ? <div className=\"cont-required\">\r\n                        <span id=\"req\" >Obligatorio</span>\r\n                      </div>\r\n                    : null\r\n                }\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default TextField","/**\r\n * Created by BWil on 13/04/2019.\r\n */\r\nimport React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n//Seccion que importa los estilos del componente\r\nimport './CheckboxField.scss'\r\n\r\nclass CheckboxField extends Component {\r\n\r\n    /*TODO estados y propiedades del componente*/\r\n    /*\r\n     * visible-> bool que muestra u oculta el componente\r\n     * tagComponent-> string que muestra el texto general que sobre el campo (label)\r\n     * enabled-> bool que habilita o no el componente\r\n     * value-> array de los items que seleccionara el user\r\n     * checksList-> array con el siguiente formatao\r\n     * todo [ { tag: 'check 1', value: 'id1' }, { tag: 'check 2', value: 'id2', activo: true }]\r\n     * onClickCheck-> funcion que retorna al padre el valor seleccionado\r\n     * */\r\n\r\n    static propTypes = {\r\n        visible: PropTypes.bool,\r\n        enabled: PropTypes.bool,\r\n        tagComponent: PropTypes.string,\r\n        value: PropTypes.array,\r\n        checksList: PropTypes.array,\r\n        onClickCheck: PropTypes.func\r\n    }\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            visible: this.props.visible,\r\n            enabled: this.props.enabled,\r\n            tagComponent: this.props.tagComponent,\r\n            value: this.props.value,\r\n            checksList: this.props.checksList,\r\n            onClickCheck: this.props.onClickCheck\r\n        }\r\n        // bindeo para funciones y metodos\r\n        this.armarChecks = this.armarChecks.bind(this)\r\n        this.validateClick = this.validateClick.bind(this)\r\n        this.setingValue = this.setingValue.bind(this)\r\n    }\r\n\r\n    static defaultProps = {\r\n        visible: true,\r\n        enabled: true,\r\n        tagComponent: 'Lista Checks',\r\n        value: [],\r\n        checksList: []\r\n    }\r\n\r\n    componentWillMount(){\r\n        // console.log('componentWillMountComponentCheckBox', this.props.checksList)\r\n        let arr = []\r\n        for (let i in this.props.checksList) {\r\n            if (this.props.checksList[i].activo !== undefined && this.props.checksList[i].activo !== null) {\r\n                arr.push(this.props.checksList[i].value)\r\n            }\r\n        }\r\n        this.setState({ value: arr })\r\n    }\r\n\r\n    componentDidMount(){\r\n        //console.log('componentDidMountComponent')\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps){\r\n        //console.log('componentWillReceiveProps', nextProps)\r\n        if (nextProps.visible !== null) {\r\n            if (nextProps.visible) {\r\n                this.setState({ visible: true })\r\n            } else {\r\n                this.setState({ visible: false })\r\n            }\r\n        }\r\n        if (nextProps.checksList !== null && nextProps.checksList !== undefined) {\r\n            this.setState({ checksList: nextProps.checksList })\r\n        }\r\n        if (nextProps.onClickCheck !== undefined && nextProps.onClickCheck !== null) {\r\n            this.setState({ onClickCheck: nextProps.onClickCheck })\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState){\r\n        //console.log('shouldComponentUpdateComponent', nextProps, nextState)\r\n        return true\r\n    }\r\n\r\n    componentWillUpdate(nextProps, nextState){\r\n        //console.log('componentWillUpdateComponent', nextProps, nextState)\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState){\r\n        //console.log('componentDidUpdateComponent', prevProps, prevState)\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        //console.log('componentWillUnmountComponent')\r\n    }\r\n\r\n    armarChecks () {\r\n        // console.log('armarChecks', this.props.checksList)\r\n        let checks = this.props.checksList.map((itemCh, numCh) => {\r\n            let active = false\r\n            if (itemCh.activo !== undefined && itemCh.activo !== null) {\r\n                active = true\r\n            }\r\n            return(\r\n                <div key={numCh} className=\"item-lbl-check\">\r\n                    <label htmlFor={numCh} className={'tag-itemCh'}>\r\n                        {itemCh.tag}\r\n                    </label>\r\n                    <input id={numCh}\r\n                        type=\"checkbox\"\r\n                        name={itemCh.value}\r\n                        value={itemCh.value}\r\n                        defaultChecked={active}\r\n                        disabled={!this.state.enabled}\r\n                        onClick={() => this.validateClick(itemCh.value)} />\r\n                </div>\r\n            )\r\n        })\r\n        return checks\r\n    }\r\n\r\n    validateClick (val) {\r\n        //  console.log('onClickCheck', val)\r\n        this.setingValue(val)\r\n        if (this.state.onClickCheck !== undefined && this.state.onClickCheck !== null) {\r\n            this.state.onClickCheck(val)\r\n        }\r\n    }\r\n\r\n    setingValue (val) {\r\n        // console.log('setingValue', val, this.state.value)\r\n        let valor = this.state.value\r\n        let duplicate = false\r\n        if (valor.length > 0) {\r\n            for (let j in valor) {\r\n                if (valor[j] === val) {\r\n                    duplicate = true\r\n                }\r\n            }\r\n            if (!duplicate) {\r\n                valor.push(val)\r\n            } else {\r\n                let i = valor.indexOf(val)\r\n                // console.log('indice repetido para quitar del array', i)\r\n                if (i !== -1) {\r\n                    valor.splice(i, 1)\r\n                }\r\n            }\r\n        } else {\r\n            valor.push(val)\r\n        }\r\n        this.setState({ value: valor })\r\n    }\r\n\r\n    render () {\r\n        // console.log('renderComponentCheckBox', this.props.checksList)\r\n        if (this.props.checksList.length > 0) {\r\n            return(\r\n                <div className=\"general-checks\" hidden={!this.state.visible}>\r\n                    <div>\r\n                        <span className=\"general-tag general-check-comp\">{this.props.tagComponent}</span>\r\n                    </div>\r\n                    {this.armarChecks()}\r\n                </div>\r\n            )\r\n        } else {\r\n            return(\r\n                <div className=\"general-checks\">\r\n                    <span className=\"general-tagCh\">{'Sin checks'}</span>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\nexport default CheckboxField","/**\r\n * Created by Williams on 6/3/2020.\r\n */\r\nimport React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n//Seccion que importa los estilos del componente\r\nimport './RadioButtonField.scss'\r\n\r\nclass MiComponente extends Component {\r\n\r\n    /*TODO estados y propiedades del componente*/\r\n    /*\r\n     * visible-> bool que muestra u oculta el componente\r\n     * tagComponent-> string que muestra el texto general que sobre el campo (label)\r\n     * enabled-> bool que habilita o no el componente\r\n     * value-> string que devuelve el radio seleccionado por el user\r\n     * radiosList-> array con el siguiente formatao\r\n     * todo solo uno debe estar activo ya que es un radio\r\n     * todo [{ id: 'rad1', tag: 'radio 1', value: 'radioUno', group: 'grupoUno' }, { id: 'rad2', tag: 'radio 2', value: 'radioDos', group: 'grupoUno', activo: true }]\r\n     * onClickRadio-> funcion que retorna al padre el valor seleccionado\r\n     * */\r\n\r\n    static propTypes = {\r\n        visible: PropTypes.bool,\r\n        enabled: PropTypes.bool,\r\n        tagComponent: PropTypes.string,\r\n        value: PropTypes.oneOfType([\r\n            PropTypes.string,\r\n            PropTypes.number\r\n        ]),\r\n        radiosList: PropTypes.array,\r\n        onClickRadio: PropTypes.func\r\n    }\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            visible: this.props.visible,\r\n            enabled: this.props.enabled,\r\n            tagComponent: this.props.tagComponent,\r\n            value: this.props.value,\r\n            radiosList: this.props.radiosList,\r\n            onClickRadio: this.props.onClickRadio\r\n        }\r\n        // bindeo para funciones y metodos\r\n        this.armarRadios = this.armarRadios.bind(this)\r\n        this.onClickedRadio = this.onClickedRadio.bind(this)\r\n    }\r\n\r\n    static defaultProps = {\r\n        visible: true,\r\n        enabled: true,\r\n        tagComponent: 'Lista Radios',\r\n        value: '',\r\n        radiosList: []\r\n    }\r\n\r\n    componentWillMount(){\r\n        // console.log('componentWillMountComponent', this.props.radiosList)\r\n        let forVal = ''\r\n        for (let i in this.props.radiosList) {\r\n            if (this.props.radiosList[i].activo !== undefined && this.props.radiosList[i].activo !== null) {\r\n                forVal = this.props.radiosList[i].value\r\n            }\r\n        }\r\n        this.setState({ value: forVal })\r\n    }\r\n\r\n    componentDidMount(){\r\n        //console.log('componentDidMountComponent')\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps){\r\n        // console.log('componentWillReceivePropsRadio', nextProps)\r\n        if (nextProps.visible !== null) {\r\n            if (nextProps.visible) {\r\n                this.setState({ visible: true })\r\n            } else {\r\n                this.setState({ visible: false })\r\n            }\r\n        }\r\n        if (nextProps.radiosList !== null && nextProps.radiosList !== undefined) {\r\n            this.setState({ radiosList: nextProps.radiosList })\r\n        }\r\n        if (nextProps.onClickRadio !== undefined && nextProps.onClickRadio !== null) {\r\n            this.setState({ onClickRadio: nextProps.onClickRadio })\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState){\r\n        //console.log('shouldComponentUpdateComponent', nextProps, nextState)\r\n        return true\r\n    }\r\n\r\n    componentWillUpdate(nextProps, nextState){\r\n        //console.log('componentWillUpdateComponent', nextProps, nextState)\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState){\r\n        //console.log('componentDidUpdateComponent', prevProps, prevState)\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        //console.log('componentWillUnmountComponent')\r\n    }\r\n\r\n    armarRadios () {\r\n        let radios = this.props.radiosList.map((itemR, numR) => {\r\n            let active = false\r\n            if (itemR.activo !== undefined && itemR.activo !== null) {\r\n                active = true\r\n            }\r\n            return(\r\n                <div key={numR} className=\"item-lbl-radio\">\r\n                    <label htmlFor={itemR.id} className={'tag-itemR'}>\r\n                        {itemR.tag}\r\n                    </label>\r\n                    <input id={itemR.id}\r\n                        type=\"radio\"\r\n                        name={itemR.group}\r\n                        value={itemR.value}\r\n                        defaultChecked={active}\r\n                        disabled={!this.state.enabled}\r\n                        onClick={() => this.onClickedRadio(itemR.id, itemR.value)} />\r\n                </div>\r\n            )\r\n\r\n        })\r\n        return radios\r\n    }\r\n\r\n    onClickedRadio (id, val) {\r\n        // console.log('onClickedRadio', id, val, this.state.onClickRadio)\r\n        if (this.state.onClickRadio !== null && this.state.onClickRadio !== undefined) {\r\n            this.state.onClickRadio(id,val)\r\n        }\r\n        this.setState({ value: val })\r\n    }\r\n\r\n    render () {\r\n        // console.log('renderComponentRadio')\r\n        if (this.props.radiosList.length > 0) {\r\n            return(\r\n                <div className=\"general-radios\" hidden={!this.state.visible}>\r\n                    <div>\r\n                        <span className=\"general-tagR general-radio-comp\">{this.props.tagComponent}</span>\r\n                    </div>\r\n                    {this.armarRadios()}\r\n                </div>\r\n            )\r\n        } else {\r\n            return(\r\n                <div className=\"general-radios\">\r\n                    <span className=\"general-tagR\">{'Sin Radios'}</span>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\nexport default MiComponente","/**\r\n * Created by Williams on 21/2/2020.\r\n */\r\nimport React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n//Seccion que importa los estilos del componente\r\nimport './SelectListField.scss'\r\n\r\nclass SelectListField extends Component {\r\n\r\n    /*TODO estados y propiedades del componente*/\r\n    /*\r\n    * idField-> identificador unico para el componente, corrige cuando hay varios de este\r\n    * componente en un mismo view\r\n    * visible-> bool que muestra u oculta el componente\r\n    * tagComponent-> string que muestra el texto etiqueta del componente (lista de utiles)\r\n    * enabled-> bool que habilita o no el componente\r\n    * value-> valor que seleccionara el user\r\n    * onClick-> Funcion que ejecutara en el padre\r\n    * optionsList-> listado que construira dinamicamente debe tener el siguiente formato\r\n    * [\r\n        { value: 'idUno', name: 'idUno', tag: 'Opcion Uno' }\r\n      ]\r\n    * onClickOption-> funcion que mandara al padre el valor seleccionado por el usuario\r\n    * */\r\n\r\n    static propTypes = {\r\n        visible: PropTypes.bool,\r\n        enabled: PropTypes.bool,\r\n        tagComponent: PropTypes.string,\r\n        value: PropTypes.oneOfType([\r\n            PropTypes.string,\r\n            PropTypes.number\r\n        ]),\r\n        defaultSelected: PropTypes.oneOfType([\r\n            PropTypes.string,\r\n            PropTypes.number\r\n        ]),\r\n        optionsList: PropTypes.array,\r\n        onClickOption: PropTypes.func\r\n    }\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            visible: this.props.visible,\r\n            enabled: this.props.enabled,\r\n            tagComponent: this.props.tagComponent,\r\n            value: this.props.value,\r\n            defaultSelected: this.props.defaultSelected,\r\n            optionsList: this.props.optionsList,\r\n            onClickOption: this.props.onClickOption\r\n        }\r\n        // bindeo para funciones y metodos\r\n        this.armarOptions = this.armarOptions.bind(this)\r\n        this.onSelectedOption = this.onSelectedOption.bind(this)\r\n    }\r\n\r\n    static defaultProps = {\r\n        visible: true,\r\n        enabled: true,\r\n        tagComponent: 'Lista Options',\r\n        value: '',\r\n        defaultSelected: '',\r\n        optionsList: []\r\n    }\r\n\r\n    componentWillMount(){\r\n        //console.log('componentWillMountComponent')\r\n        if (this.state.defaultSelected !== null && this.state.defaultSelected !== undefined &&\r\n            this.state.defaultSelected !== '') {\r\n            this.setState({ value: this.state.defaultSelected })\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        //console.log('componentDidMountComponent')\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps){\r\n        //console.log('componentWillReceiveProps', nextProps)\r\n        if (nextProps.visible !== null) {\r\n            if (nextProps.visible) {\r\n                this.setState({ visible: true })\r\n            } else {\r\n                this.setState({ visible: false })\r\n            }\r\n        }\r\n        if (nextProps.optionsList !== null && nextProps.optionsList !== undefined) {\r\n            this.setState({ optionsList: nextProps.optionsList })\r\n        }\r\n        if (nextProps.onClickOption !== undefined && nextProps.onClickOption !== null) {\r\n            this.setState({ onClickOption: nextProps.onClickOption })\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState){\r\n        //console.log('shouldComponentUpdateComponent', nextProps, nextState)\r\n        return true\r\n    }\r\n\r\n    componentWillUpdate(nextProps, nextState){\r\n        //console.log('componentWillUpdateComponent', nextProps, nextState)\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState){\r\n        //console.log('componentDidUpdateComponent', prevProps, prevState)\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        //console.log('componentWillUnmountComponent')\r\n    }\r\n\r\n    armarOptions () {\r\n        // console.log('armarOptions', this.state.optionsList)\r\n        let defaultOptions = [ { tag: 'Seleccionar...', value: '', name: '' } ]\r\n        let forMapArr = defaultOptions.concat(this.state.optionsList)\r\n\r\n        let options = forMapArr.map((itemOp, numOp) => {\r\n            let enabled = true\r\n            let ddd = false\r\n            if (itemOp.value === '2') {\r\n                //enabled = false\r\n            }\r\n            if (itemOp.disabled !== undefined && itemOp.disabled !== null) {\r\n                //enabled = false\r\n            }\r\n\r\n            return(\r\n                <option key={numOp}\r\n                    ref={numOp}\r\n                    value={itemOp.value}\r\n                    name={itemOp.name}\r\n                    disabled={!enabled} >\r\n                    {itemOp.tag}\r\n                </option>\r\n            )\r\n        })\r\n        return options\r\n    }\r\n\r\n    onSelectedOption() {\r\n        var selectBox = document.getElementById(this.props.idField)\r\n        var selectedValue = selectBox.options[selectBox.selectedIndex].value\r\n        // console.log('onSelectedOption', selectedValue)\r\n        if (this.state.onClickOption !== undefined && this.state.onClickOption !== null) {\r\n            this.state.onClickOption(selectedValue)\r\n        }\r\n        this.setState({ value: selectedValue })\r\n    }\r\n\r\n    render () {\r\n        // console.log('renderComponent')\r\n        return(\r\n            <div hidden={!this.state.visible} className=\"general-select\">\r\n                <div className=\"cont-tag-comp comp-select-def\">\r\n                    <label className=\"lbl-tag-comp-select\">{this.props.tagComponent}</label>\r\n                </div>\r\n                <div className=\"cont-select-ops\">\r\n                    <select id={this.props.idField} className=\"select-comp comp-select-def\"\r\n                        value={this.state.value}\r\n                        onChange={this.onSelectedOption}\r\n                        disabled={!this.state.enabled} >\r\n                        {this.armarOptions()}\r\n                    </select>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default SelectListField","/**\r\n * Created by Williams on 23/2/2020.\r\n */\r\nimport React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n//Seccion que importa los estilos del componente\r\n//import './'\r\n\r\nclass ContentTable extends Component {\r\n\r\n    static propTypes = {\r\n        listaContenido: PropTypes.array,\r\n        identificadorUnico: PropTypes.string,\r\n        forUpdate: PropTypes.bool,\r\n        forDelete: PropTypes.bool,\r\n        onClickItemTable: PropTypes.func\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            listaContenido: this.props.listaContenido,\r\n            visible: this.props.visible,\r\n            identificadorUnico: this.props.identificadorUnico,\r\n            forUpdate: this.props.forUpdate,\r\n            forDelete: this.props.forDelete,\r\n            onClickItemTable: this.props.onClickItemTable\r\n        }\r\n        // bindeo para funciones y metodos\r\n        this.armarRowTable = this.armarRowTable.bind(this)\r\n        this.clickItemTable = this.clickItemTable.bind(this)\r\n    }\r\n\r\n    static defaultProps = {\r\n        visible: true,\r\n        identificadorUnico: '',\r\n        forUpdate: false,\r\n        forDelete: false,\r\n        listaContenido: []\r\n    }\r\n\r\n    componentWillMount(){\r\n        //console.log('componentWillMountComponent')\r\n    }\r\n\r\n    componentDidMount(){\r\n        //console.log('componentDidMountComponent')\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps){\r\n        //console.log('componentWillReceiveProps', nextProps)\r\n        if (nextProps.visible !== null) {\r\n            if (nextProps.visible) {\r\n                this.setState({ visible: true })\r\n            } else {\r\n                this.setState({ visible: false })\r\n            }\r\n        }\r\n        if (nextProps.listaContenido !== null) {\r\n            this.setState({ listaContenido: nextProps.listaContenido })\r\n        }\r\n        if (nextProps.onClickItemTable !== null) {\r\n            this.setState({ onClickItemTable: nextProps.onClickItemTable })\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState){\r\n        //console.log('shouldComponentUpdateComponent', nextProps, nextState)\r\n        return true\r\n    }\r\n\r\n    componentWillUpdate(nextProps, nextState){\r\n        //console.log('componentWillUpdateComponent', nextProps, nextState)\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState){\r\n        //console.log('componentDidUpdateComponent', prevProps, prevState)\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        //console.log('componentWillUnmountComponent')\r\n    }\r\n\r\n    armarRowTable (itemL) {\r\n        // console.log('armarRowTable', itemL, this.state, this.props)\r\n        let arrCont = []\r\n        for(let prop in itemL){\r\n            arrCont.push(prop)\r\n        }\r\n        if (this.state.forUpdate) {\r\n            arrCont.push('UpdaterTable')\r\n        }\r\n        if (this.state.forDelete) {\r\n            arrCont.push('DeleterTable')\r\n        }\r\n        let cont = arrCont.map((itemC, numC) => {\r\n            // console.log('itemCDelArray', itemC)\r\n            if (itemC === 'UpdaterTable') {\r\n                return(\r\n                    <td key={numC}>\r\n                        <div className=\"btn btn-warning btn-xs\"\r\n                             onClick={() => this.clickItemTable(itemL[this.props.identificadorUnico], 'update')} >\r\n                            <img alt=\"updater\"\r\n                                 src={'appImages/pencil.png'}\r\n                                 width=\"25\"\r\n                                 height=\"25\" />\r\n                        </div>\r\n                    </td>\r\n                )\r\n            } else if (itemC === 'DeleterTable') {\r\n                return(\r\n                    <td key={numC}>\r\n                        <div className=\"btn btn-danger btn-xs\"\r\n                             onClick={() => this.clickItemTable(itemL[this.props.identificadorUnico], 'delete')} >\r\n                            <img alt=\"deleter\"\r\n                                src={'appImages/delete.png'}\r\n                                 width=\"25\"\r\n                                 height=\"25\" />\r\n                        </div>\r\n                    </td>\r\n                )\r\n            } else if (itemC === this.props.identificadorUnico) {\r\n                return(\r\n                    null\r\n                )\r\n            } else {\r\n                return(\r\n                    <td key={numC}>{itemL[itemC]}</td>\r\n                )\r\n            }\r\n        })\r\n        return(\r\n            cont\r\n        )\r\n    }\r\n\r\n    clickItemTable (val, action) {\r\n        // console.log('clickItemTable', val, action)\r\n        if (this.state.onClickItemTable !== null && this.state.onClickItemTable !== undefined) {\r\n            this.state.onClickItemTable(val, action)\r\n        }\r\n    }\r\n\r\n    render () {\r\n        // console.log('renderComponent', this.state.listaContenido)\r\n        return(this.state.listaContenido.map((itemL, idL) => {\r\n            return(\r\n                <tr key={idL} >\r\n                    {this.armarRowTable(itemL)}\r\n                </tr>\r\n            )\r\n            })\r\n        )\r\n    }\r\n}\r\nexport default ContentTable","/**\r\n * Created by Williams on 22/2/2020.\r\n */\r\nimport React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport ContentTable from './ContentTable.js'\r\n\r\n//Seccion que importa los estilos del componente\r\nimport './TableField.scss'\r\n\r\nclass TableField extends Component {\r\n\r\n    /*\r\n    * TODO importante explicacion del componente\r\n    * visible-> bool que muestra u oculta el componente\r\n    * tagComponent-> Etiqueta para el componente (ej. mi lista favorita)\r\n    * head->array de strings con el nombre que tendran las cabeceras\r\n    * data->array de datos que renderizara dinamicamente, importante que cuando se traiga\r\n    *       una lista se debe coincidir con el 'identificador' ya que la propiedad con este\r\n    *       nombre sera ocultado y ese valor sera devuelto al padre para su update o delete\r\n    *       segun sea el caso.\r\n    * identificador->estado que manejara por detras de la tabla el nombre de la propiedad de la\r\n    *                lista en 'data', ademas de ocultar todos los items que corresponda a esa\r\n    *                propiedad en la lista, por decir, identificador='id_use', los valores de la\r\n    *                lista que esten en la propiedad seran ocultos.\r\n    * forUpdate-> bool que oculta o muestra la columna editar\r\n    * forDelete-> bool que oculta o muestra la columna eliminar\r\n    * onClickItem->retorna a la funcion indicada en el padre el valor del 'identificador' del item\r\n    *              seleccionado. Y el tipo de accion (update, delete).\r\n    * */\r\n\r\n    static propTypes = {\r\n        head: PropTypes.array,\r\n        data: PropTypes.array,\r\n        visible: PropTypes.bool,\r\n        identificador: PropTypes.string,\r\n        forUpdate: PropTypes.bool,\r\n        forDelete: PropTypes.bool,\r\n        tagComponent: PropTypes.string,\r\n        onClickItem: PropTypes.func\r\n    }\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            data: this.props.data,\r\n            head: this.props.head,\r\n            visible: this.props.visible,\r\n            identificador: this.props.identificador,\r\n            forUpdate: this.props.forUpdate,\r\n            forDelete: this.props.forDelete,\r\n            tagComponent: this.props.tagComponent,\r\n            onClickItem: this.props.onClickItem\r\n        }\r\n        // bindeo para funciones y metodos\r\n        this.armarCabecera = this.armarCabecera.bind(this)\r\n        this.armarContenido = this.armarContenido.bind(this)\r\n        this.handleItem = this.handleItem.bind(this)\r\n    }\r\n\r\n    static defaultProps = {\r\n        head: [],\r\n        data: [],\r\n        visible: true,\r\n        identificador: '',\r\n        forUpdate: false,\r\n        forDelete: false,\r\n        tagComponent: ''\r\n    }\r\n\r\n    componentWillMount(){\r\n        //console.log('componentWillMountComponent')\r\n    }\r\n\r\n    componentDidMount(){\r\n        //console.log('componentDidMountComponent')\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps){\r\n        //console.log('componentWillReceiveProps', nextProps)\r\n        if (nextProps.visible !== null) {\r\n            if (nextProps.visible) {\r\n                this.setState({ visible: true })\r\n            } else {\r\n                this.setState({ visible: false })\r\n            }\r\n        }\r\n        if (nextProps.forUpdate !== null) {\r\n            if (nextProps.forUpdate) {\r\n                this.setState({ forUpdate: true })\r\n            } else {\r\n                this.setState({ forUpdate: false })\r\n            }\r\n        }\r\n        if (nextProps.forDelete !== null) {\r\n            if (nextProps.forDelete) {\r\n                this.setState({ forDelete: true })\r\n            } else {\r\n                this.setState({ forDelete: false })\r\n            }\r\n        }\r\n        if (nextProps.head !== null) {\r\n            this.setState({ head: nextProps.head })\r\n        }\r\n        if (nextProps.data !== null) {\r\n            this.setState({ data: nextProps.data })\r\n        }\r\n        if (nextProps.onClickItem !== null) {\r\n            this.setState({ onClickItem: nextProps.onClickItem })\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState){\r\n        //console.log('shouldComponentUpdateComponent', nextProps, nextState)\r\n        return true\r\n    }\r\n\r\n    componentWillUpdate(nextProps, nextState){\r\n        //console.log('componentWillUpdateComponent', nextProps, nextState)\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState){\r\n        //console.log('componentDidUpdateComponent', prevProps, prevState)\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        //console.log('componentWillUnmountComponent')\r\n    }\r\n\r\n    armarCabecera () {\r\n        // console.log('armarCabecera', this.props.head)\r\n        let forHead = this.state.head\r\n        if (this.state.forUpdate) {\r\n            forHead.push('Editar')\r\n        }\r\n        if (this.state.forDelete) {\r\n            forHead.push('Eliminar')\r\n        }\r\n        let head = forHead.map((itemH, numH) => {\r\n            return(\r\n                <th key={numH} scope=\"col\">{itemH}</th>\r\n            )\r\n        })\r\n        return(\r\n            head\r\n        )\r\n    }\r\n\r\n    armarContenido () {\r\n        return(\r\n            <ContentTable\r\n                identificadorUnico={this.state.identificador}\r\n                listaContenido={this.state.data}\r\n                forUpdate={this.state.forUpdate}\r\n                forDelete={this.state.forDelete}\r\n                onClickItemTable={this.handleItem} />\r\n        )\r\n    }\r\n\r\n    handleItem (val, action) {\r\n        // console.log('handleItem', val, action)\r\n        if (this.state.onClickItem !== null && this.state.onClickItem !== undefined) {\r\n            this.state.onClickItem(val, action)\r\n        }\r\n    }\r\n\r\n    render () {\r\n        // console.log('renderComponent')\r\n        if (this.state.data.length > 0) {\r\n            return(\r\n                <div hidden={!this.state.visible} className=\"table-responsive-md\">\r\n                    <div className=\"tag-comp-table\">\r\n                        <span className=\"tag-table\">{this.props.tagComponent}</span>\r\n                    </div>\r\n                    <table className=\"table table-hover table-condensed table-bordered table-especific\">\r\n                        <thead className=\"thead-dark\">\r\n                        <tr>\r\n                            {this.armarCabecera()}\r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        {this.armarContenido()}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            )\r\n        } else {\r\n            return(\r\n                <div className=\"tag-comp-table\">\r\n                    <span className=\"tag-table\">{'Sin Resultados'}</span>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\nexport default TableField","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n//Seccion que carga el archivo que realiza los estilos\r\nimport './Test.scss'\r\n\r\n//Seccion para instanciar gestores e importar funciones del controller\r\nimport {\r\n    GUARDAR,\r\n    DataTableTest,\r\n    probarSQLForData,\r\n    probarSQLABM\r\n} from './TestController.js'\r\n\r\n//Seccion para importar componentes\r\nimport ButtonField from './../../components/ButtonField/ButtonField.js'\r\nimport TextField from './../../components/TextField/TextField.js'\r\nimport CheckboxField from './../../components/CheckboxField/CheckboxField.js'\r\nimport RadioButtonField from './../../components/RadioButtonField/RadioButtonField.js'\r\nimport SelectListField from './../../components/SelectListField/SelectListField.js'\r\nimport TableField from './../../components/TableField/TableField.js'\r\n\r\n//Seccion para importar la funcion que retorna la entidad del view\r\n//import { obtenerEntidadForView } from './../../data/EntitiesView.js'\r\n//constante que treara el objeto entidad para esta vista, para mandar a los props de los componentes\r\n//const EntityView = obtenerEntidadForView('MyEntityView')\r\n\r\nclass View extends Component {\r\n\r\n    static propTypes = {\r\n\r\n    }\r\n\r\n    constructor (props) {\r\n        // console.log('constructorView')\r\n        super(props)\r\n\r\n        // bindeo para funciones y metodos\r\n        this.testSQLForData = this.testSQLForData.bind(this)\r\n        this.testSQLABM = this.testSQLABM.bind(this)\r\n        this.testClickRadio = this.testClickRadio.bind(this)\r\n        this.testValueRadios = this.testValueRadios.bind(this)\r\n        this.testOnClickOptions = this.testOnClickOptions.bind(this)\r\n        this.testValOptions = this.testValOptions.bind(this)\r\n        this.guardarTestTable = this.guardarTestTable.bind(this)\r\n        this.traerDataTestTable = this.traerDataTestTable.bind(this)\r\n        this.testRetornoNietoTable = this.testRetornoNietoTable.bind(this)\r\n        this.validarCamposTable = this.validarCamposTable.bind(this)\r\n    }\r\n\r\n    static defaultProps = {\r\n\r\n    }\r\n\r\n    componentWillMount(){\r\n        //console.log('componentWillMountView')\r\n    }\r\n\r\n    componentDidMount(){\r\n        //console.log('componentDidMountView')\r\n\r\n        //this.traerDataTestTable()\r\n\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState){\r\n        //console.log('shouldComponentUpdateView', nextProps, nextState)\r\n        return true\r\n    }\r\n\r\n    componentWillUpdate(nextProps, nextState){\r\n        //console.log('componentWillUpdateView', nextProps, nextState)\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState){\r\n        //console.log('componentDidUpdateView', prevProps, prevState)\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        //console.log('componentWillUnmountView')\r\n    }\r\n\r\n    testSQLForData () {\r\n        console.log('testSQLForData')\r\n        probarSQLForData().then(function(pResp){\r\n            console.log('probarSQLForDataResp', pResp)\r\n        })\r\n    }\r\n\r\n    testSQLABM () {\r\n        console.log('testSQLABM')\r\n        probarSQLABM().then(function(pResp){\r\n            console.log('testSQLABMpResp', pResp)\r\n        })\r\n    }\r\n\r\n    testClickRadio (id, value) {\r\n        console.log('testClickRadioView', id, value)\r\n    }\r\n\r\n    testValueRadios () {\r\n        console.log('testValueRadios', this.refs.MisRadios.state)\r\n    }\r\n\r\n    testOnClickOptions (val) {\r\n        console.log('testOnClickOptionsView', val)\r\n    }\r\n\r\n    testValOptions () {\r\n        console.log('testValOptions', this.refs.opts.state)\r\n    }\r\n\r\n    traerDataTestTable () {\r\n        let self = this\r\n        DataTableTest().then((pRespDATATT) => {\r\n            console.log('traerDataTestTable', pRespDATATT)\r\n            //let lista = self.validarCamposTable(pRespDATATT.listaResultado)\r\n            let lista = pRespDATATT.listaResultado\r\n\r\n\r\n            self.refs.dataTest.setState({ data: lista })\r\n        })\r\n\r\n    }\r\n\r\n    validarCamposTable (data = []) {\r\n        let arrReturn = []\r\n        if (data.length > 0) {\r\n            for (let i in data) {\r\n                let objData = data[i]\r\n                objData.identificadorUnico = 'id_test'\r\n            }\r\n\r\n        }\r\n        return arrReturn\r\n    }\r\n\r\n    guardarTestTable () {\r\n        console.log('guardarTestTable')\r\n        GUARDAR().then((pResp) => {\r\n            console.log('Respuesta guardado', pResp)\r\n        })\r\n    }\r\n\r\n    testRetornoNietoTable (val, action) {\r\n        console.log('testRetornoNietoTable', val, action)\r\n    }\r\n\r\n    render () {\r\n        //console.log('renderView', this)\r\n\r\n        let arr = [\r\n            { tag: 'option One', value: 'op1', name: 'ww' },\r\n            { tag: 'option Two', value: 'op2', name: 'ww' },\r\n            { tag: 'option Three', value: 'op3', name: 'ww' },\r\n            { tag: 'option Four', value: 'op4', name: 'ww' },\r\n            { tag: 'option Five', value: 'op5', name: 'ww' },\r\n            { tag: 'option Six', value: 'op6', name: 'ww' },\r\n            { tag: 'option Seven', value: 'op7', name: 'ww' },\r\n            { tag: 'option Eight', value: 'op8', name: 'ww' },\r\n            { tag: 'option Nine', value: 'op9', name: 'ww' },\r\n            { tag: 'option Ten', value: 'op10', name: 'ww' }\r\n        ]\r\n\r\n        let head = ['Columna Dos']\r\n\r\n\r\n        return (\r\n            <div>\r\n\r\n                {/*\r\n                <TableField ref={'dataTest'}\r\n                    head={head}\r\n                    data={[]}\r\n                    identificador={'id_test'}\r\n                    forUpdate={true}\r\n                    forDelete={true}\r\n                    tagComponent=\"Lista preferida\"\r\n                    onClickItem={this.testRetornoNietoTable} />\r\n\r\n                <ButtonField\r\n                    texto={'Guardar datos test table'}\r\n                    type={'default'}\r\n                    onClick={this.guardarTestTable} />\r\n\r\n                <ButtonField\r\n                    texto={'Guardar datos test table'}\r\n                    type={'success'}\r\n                    onClick={this.guardarTestTable} />\r\n\r\n                */}\r\n\r\n                <a href={'http://localhost/ShopCar/TestReports/creatorReport.php'} className=\"btn btn-dark btn-sm\">\r\n                    Ir al back <span className=\"glyphicon glyphicon-file\"></span>\r\n                </a>\r\n\r\n\r\n                <a href=\"../procesos/ventas/testReport.php\" >\r\n                    test report <span className=\"glyphicon glyphicon-file\"></span>\r\n                </a>\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\nexport default View","/**\r\n * Created by Williams on 17/2/2020.\r\n */\r\nimport TestView from './TestView.js'\r\nexport default TestView","/**\r\n * Created by Williams on 21/3/2020.\r\n */\r\nexport function obtenerFechaHoraActual () {\r\n    let date = new Date()\r\n    let year = date.getFullYear()\r\n    let mounth = date.getMonth()\r\n    let day = date.getDate()\r\n    let hours = date.getHours()\r\n    let minutes = date.getMinutes()\r\n    let seconds = date.getSeconds()\r\n    let currentDay = year + '-' + mounth + '-' + day + ' ' + hours + ':' + minutes + ':' + seconds\r\n    return currentDay\r\n}","/**\r\n * Created by Williams on 8/3/2020.\r\n */\r\nimport { obtenerFechaHoraActual } from '../../services/GestorUtilitarios.js'\r\n\r\nexport default class Model {\r\n    constructor () {\r\n\r\n    }\r\n\r\n    insertarRegistroVehiculo (datos = null) {\r\n\r\n        let consulta = ' INSERT INTO vehicle (id_vehicle, id_sub_trademark, color, precio_unitario, placa, ' +\r\n            ' chasis, anio, img, fecha_creacion) ' +\r\n            ' VALUES ( ' +\r\n            `'` + datos.idVehicle + `', ` +\r\n            `'` + datos.idSubMarca + `', ` +\r\n            `'` + datos.color + `', ` +\r\n            datos.precioU + `, ` +\r\n            `'` + datos.placa + `', ` +\r\n            `'` + datos.chasis + `', ` +\r\n            datos.anio + `, ` +\r\n            `'` + 'HAC.png' + `', ` +\r\n            `'` + obtenerFechaHoraActual() + `'` + ' ) '\r\n        return consulta\r\n    }\r\n\r\n    obtenerSubMarks () {\r\n        let consulta = ' SELECT id_sub_trademark, name_sub_trademark ' +\r\n            ' FROM subtrademark '\r\n        return consulta\r\n    }\r\n\r\n    obtenerDataVehicles () {\r\n        let consulta = ' SELECT V.id_vehicle, T.name_trademark, ST.name_sub_trademark, V.color, V.anio, ' +\r\n            ' V.precio_unitario FROM vehicle V ' +\r\n            ' INNER JOIN subtrademark ST ON (V.id_sub_trademark = ST.id_sub_trademark) ' +\r\n            ' INNER JOIN trademark T ON (T.id_trademark = ST.id_trademark) '\r\n        return consulta\r\n    }\r\n}","/**\r\n * Created by Williams on 8/3/2020.\r\n */\r\nimport GestorServices from './../../services/GestorServices.js'\r\nimport Model from './VehiclesModel.js'\r\n\r\nvar uuid = require('uuid')\r\n\r\nexport function GUARDAR (datos = null) {\r\n    let gestorServices = new GestorServices()\r\n    let Modelo = new Model()\r\n    datos.idVehicle = uuid.v4()\r\n    let insertQuery = Modelo.insertarRegistroVehiculo(datos)\r\n\r\n    return new Promise((resolve, reject) => {\r\n        gestorServices.ExecuteSimpleQuery(insertQuery, 'insertar')\r\n            .then((pRespSaveVehicleDB) => {\r\n                // console.log('pRespSaveVehicleDB', pRespSaveVehicleDB)\r\n                if (pRespSaveVehicleDB.correcto) {\r\n                    resolve({\r\n                        Correcto: true,\r\n                        Mensaje: pRespSaveVehicleDB.mensaje,\r\n                        listaResultado: pRespSaveVehicleDB.listaResultado\r\n                    })\r\n                } else {\r\n                    resolve({\r\n                        Correcto: false,\r\n                        Mensaje: pRespSaveVehicleDB.mensaje,\r\n                        listaResultado: []\r\n                    })\r\n                }\r\n            })\r\n    })\r\n}\r\n\r\n\r\nexport function ObtenerSubMarcas () {\r\n    let gestorServices = new GestorServices()\r\n    let Modelo = new Model()\r\n    let consulta = Modelo.obtenerSubMarks()\r\n\r\n    return new Promise((resolve, reject) => {\r\n        gestorServices.ExecuteSimpleQuery(consulta).then(function(pRespsubMaeksDB) {\r\n            // console.log('pRespsubMaeksDB', pRespsubMaeksDB)\r\n            if (pRespsubMaeksDB.correcto) {\r\n                resolve({\r\n                    Correcto: true,\r\n                    Mensaje: pRespsubMaeksDB.mensaje,\r\n                    listaResultado: pRespsubMaeksDB.listaResultado\r\n                })\r\n            } else {\r\n                resolve({\r\n                    Correcto: false,\r\n                    Mensaje: pRespsubMaeksDB.mensaje,\r\n                    listaResultado: []\r\n                })\r\n            }\r\n        })\r\n    })\r\n}\r\n\r\nexport function ObtenerDatosVehiculos () {\r\n    let gestorServices = new GestorServices()\r\n    let Modelo = new Model()\r\n    let consulta = Modelo.obtenerDataVehicles()\r\n\r\n    return new Promise((resolve, reject) => {\r\n        gestorServices.ExecuteSimpleQuery(consulta).then((pRespVehiclesDB) => {\r\n            // console.log('pRespVehiclesDB', pRespVehiclesDB)\r\n            if (pRespVehiclesDB.correcto) {\r\n                resolve({\r\n                    Correcto: true,\r\n                    Mensaje: pRespVehiclesDB.mensaje,\r\n                    listaResultado: pRespVehiclesDB.listaResultado\r\n                })\r\n            } else {\r\n                resolve({\r\n                    Correcto: false,\r\n                    Mensaje: pRespVehiclesDB.mensaje,\r\n                    listaResultado: []\r\n                })\r\n            }\r\n        })\r\n    })\r\n}","/**\r\n * Created by Williams on 21/2/2020.\r\n */\r\nimport React from 'react'\r\nimport './TitleSectionField.scss'\r\n\r\nconst TitleSectionField = props => (\r\n    <div className=\"container-title-section\">\r\n        <span id=\"text\" >{props.texto}</span>\r\n        <hr/>\r\n    </div>\r\n)\r\n\r\nexport default TitleSectionField","/**\r\n * Created by Williams on 9/3/2020.\r\n */\r\nimport React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n//Seccion que importa los estilos del componente\r\nimport './NumberField.scss'\r\n\r\nclass MiComponente extends Component {\r\n\r\n    /*TODO estados y propiedades del componente*/\r\n    /*\r\n     * visible-> bool que muestra u oculta el componente\r\n     * tagComponent-> string que muestra el texto que sobre el campo (label)\r\n     * enabled-> bool que habilita o no el componente\r\n     * value-> valor que pondra en user\r\n     * defaultValue-> valor numerico con el cual iniciara el componente\r\n     * tagValue->string que dira que queremos cuantificar (c.c., autos ,personas, etc)\r\n     * */\r\n\r\n    static propTypes = {\r\n        tagComponent: PropTypes.string,\r\n        visible: PropTypes.bool,\r\n        value: PropTypes.oneOfType([\r\n            PropTypes.string,\r\n            PropTypes.number\r\n        ]),\r\n        enabled: PropTypes.bool,\r\n        defaultValue: PropTypes.number,\r\n        tagValue: PropTypes.string\r\n    }\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            tagComponent: this.props.tagComponent,\r\n            visible: this.props.visible,\r\n            value: this.props.defaultValue,\r\n            enabled: this.props.enabled,\r\n            defaultValue: this.props.defaultValue,\r\n            tagValue: this.props.tagValue\r\n        }\r\n        // bindeo para funciones y metodos\r\n        this.onChangeField = this.onChangeField.bind(this)\r\n    }\r\n\r\n    static defaultProps = {\r\n        tagComponent: '',\r\n        visible: true,\r\n        value: '',\r\n        enabled: true,\r\n        defaultValue: 1,\r\n        tagValue: ''\r\n    }\r\n\r\n    componentWillMount(){\r\n        // console.log('componentWillMountComponentNumberFiled', this)\r\n    }\r\n\r\n    componentDidMount(){\r\n        //console.log('componentDidMountComponent')\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps){\r\n        //console.log('componentWillReceiveProps', nextProps)\r\n        if (nextProps.visible !== null) {\r\n            if (nextProps.visible) {\r\n                this.setState({ visible: true })\r\n            } else {\r\n                this.setState({ visible: false })\r\n            }\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState){\r\n        //console.log('shouldComponentUpdateComponent', nextProps, nextState)\r\n        return true\r\n    }\r\n\r\n    componentWillUpdate(nextProps, nextState){\r\n        //console.log('componentWillUpdateComponent', nextProps, nextState)\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState){\r\n        //console.log('componentDidUpdateComponent', prevProps, prevState)\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        //console.log('componentWillUnmountComponent')\r\n    }\r\n\r\n    onChangeField () {\r\n        // console.log('onChangeField', this.props)\r\n        let valor = document.getElementById(this.props.idField).value\r\n        // console.log('CambioNumberField', valor)\r\n        this.setState({ value: valor })\r\n    }\r\n\r\n    render () {\r\n        // console.log('renderComponentNumberField', this)\r\n        return(\r\n            <div hidden={!this.state.visible} className=\"general-number\" >\r\n                {\r\n                    (this.props.tagComponent !== '')\r\n                        ?\r\n                        <label htmlFor={this.props.idField} className={'general-comp-num general-label-num'}>\r\n                            {this.props.tagComponent}\r\n                        </label>\r\n                        : null\r\n                }\r\n\r\n                <input className={' general-comp-num general-number-field border-num'}\r\n                    id={this.props.idField}\r\n                    type=\"number\"\r\n                    value={this.state.value}\r\n                    placeholder={this.props.placeholder}\r\n                    disabled={!this.state.enabled}\r\n                    onChange={this.onChangeField} />\r\n                <span id=\"t-val\">{this.props.tagValue}</span>\r\n\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default MiComponente","/**\r\n * Created by Williams on 21/3/2020.\r\n */\r\nimport React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n//Seccion que importa los estilos del componente\r\nimport './FileImgField.scss'\r\n\r\nclass MiComponente extends Component {\r\n\r\n    static propTypes = {\r\n        tagComponent: PropTypes.string,\r\n        visible: PropTypes.bool,\r\n        value: PropTypes.string,\r\n        enabled: PropTypes.bool\r\n    }\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            tagComponent: this.props.tagComponent,\r\n            visible: this.props.visible,\r\n            value: this.props.value,\r\n            enabled: this.props.enabled\r\n        }\r\n        // bindeo para funciones y metodos\r\n        this.onHandleImg = this.onHandleImg.bind(this)\r\n    }\r\n\r\n    static defaultProps = {\r\n        tagComponent: 'Seleccione Imagen',\r\n        visible: true,\r\n        value: '',\r\n        enabled: true\r\n    }\r\n\r\n    componentWillMount(){\r\n        //console.log('componentWillMountComponent')\r\n    }\r\n\r\n    componentDidMount(){\r\n        //console.log('componentDidMountComponent')\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps){\r\n        //console.log('componentWillReceiveProps', nextProps)\r\n        if (nextProps.visible !== null) {\r\n            if (nextProps.visible) {\r\n                this.setState({ visible: true })\r\n            } else {\r\n                this.setState({ visible: false })\r\n            }\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState){\r\n        //console.log('shouldComponentUpdateComponent', nextProps, nextState)\r\n        return true\r\n    }\r\n\r\n    componentWillUpdate(nextProps, nextState){\r\n        //console.log('componentWillUpdateComponent', nextProps, nextState)\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState){\r\n        //console.log('componentDidUpdateComponent', prevProps, prevState)\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        //console.log('componentWillUnmountComponent')\r\n    }\r\n\r\n    onHandleImg () {\r\n        let valor = document.getElementById('imagen').value\r\n        let split1 = valor.split('\\\\')\r\n        let file = split1[split1.length - 1]\r\n        // console.log('onHandleImg', valor)\r\n        // console.log('onHandleImg', file)\r\n        this.setState({ value: file })\r\n    }\r\n\r\n    render () {\r\n        // console.log('renderComponent')\r\n        return(\r\n            <div hidden={!this.state.visible} className=\"general-img-file\">\r\n                <label htmlFor=\"imagen\" className=\"tag-comp-imgFile gen-comp-fileImg\" >\r\n                    {this.props.tagComponent}\r\n                </label>\r\n                <input className=\"in-file-img\"\r\n                    type=\"file\"\r\n                    id=\"imagen\"\r\n                    name=\"imagen\"\r\n                    accept=\".jpg, .jpeg, .png\"\r\n                    onChange={this.onHandleImg}\r\n                    disabled={!this.props.enabled} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default MiComponente","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport alertify from 'alertifyjs'\r\n//Seccion que carga el archivo que realiza los estilos\r\nimport './Vehicles.scss'\r\n\r\n//Seccion para instanciar gestores e importar funciones del controller\r\nimport {\r\n    GUARDAR,\r\n    ObtenerSubMarcas,\r\n    ObtenerDatosVehiculos\r\n} from './VehiclesController.js'\r\n\r\n//Seccion para importar componentes\r\nimport TitleSectionField from './../../components/TitleSeccionField/TitleSectionField.js'\r\nimport SelectListField from './../../components/SelectListField/SelectListField.js'\r\nimport TextField from './../../components/TextField/TextField.js'\r\nimport NumberField from './../../components/NumberField/NumberField.js'\r\nimport ButtonField from './../../components/ButtonField/ButtonField.js'\r\nimport TableField from './../../components/TableField/TableField.js'\r\nimport FileImgField from './../../components/FileImgFiled/FileImgField.js'\r\n\r\n//Seccion para importar la funcion que retorna la entidad del view\r\nimport { obtenerEntidadForView } from './../../data/EntitiesView.js'\r\n//constante que treara el objeto entidad para esta vista, para mandar a los props de los componentes\r\nconst EntityView = obtenerEntidadForView('SeccionVehiculos')\r\n\r\nclass View extends Component {\r\n\r\n    static propTypes = {\r\n\r\n    }\r\n\r\n    constructor (props) {\r\n        // console.log('constructorView')\r\n        super(props)\r\n\r\n        // bindeo para funciones y metodos\r\n        this.validadorCampos = this.validadorCampos.bind(this)\r\n        this.obtenerListaSubMarcas = this.obtenerListaSubMarcas.bind(this)\r\n        this.armarListadoSubMarks = this.armarListadoSubMarks.bind(this)\r\n        this.guardarVehiculo = this.guardarVehiculo.bind(this)\r\n        this.vaciarCampos = this.vaciarCampos.bind(this)\r\n        this.obtenerVehiculos = this.obtenerVehiculos.bind(this)\r\n    }\r\n\r\n    static defaultProps = {\r\n\r\n    }\r\n\r\n    componentWillMount(){\r\n        //console.log('componentWillMountView')\r\n    }\r\n\r\n    componentDidMount(){\r\n        //console.log('componentDidMountView')\r\n        let self = this\r\n        self.obtenerListaSubMarcas()\r\n        self.obtenerVehiculos()\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState){\r\n        //console.log('shouldComponentUpdateView', nextProps, nextState)\r\n        return true\r\n    }\r\n\r\n    componentWillUpdate(nextProps, nextState){\r\n        //console.log('componentWillUpdateView', nextProps, nextState)\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState){\r\n        //console.log('componentDidUpdateView', prevProps, prevState)\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        //console.log('componentWillUnmountView')\r\n    }\r\n\r\n    validadorCampos () {\r\n        let self = this\r\n        let refsObligatorios = ['listSubMarks', 'listColors', 'precioU', 'placa', 'anio']\r\n        let objRetorno = {\r\n            correcto: true,\r\n            mensaje: 'llenado correcto'\r\n        }\r\n        for (let i in refsObligatorios) {\r\n            if (self.refs[refsObligatorios[i]].state.value === '' ||\r\n                self.refs[refsObligatorios[i]].state.value === undefined ||\r\n                self.refs[refsObligatorios[i]].state.value === null) {\r\n                objRetorno.correcto = false\r\n                objRetorno.mensaje = 'Debe llenar el campo: ' + self.refs[refsObligatorios[i]].state.tagComponent\r\n                break\r\n            }\r\n        }\r\n        return objRetorno\r\n    }\r\n\r\n    obtenerListaSubMarcas () {\r\n        let self = this\r\n        ObtenerSubMarcas().then((pRespSubMarksController) => {\r\n            if (pRespSubMarksController.Correcto) {\r\n                let listaMarcas = self.armarListadoSubMarks(pRespSubMarksController.listaResultado)\r\n                self.refs.listSubMarks.setState({ optionsList: listaMarcas })\r\n            } else {\r\n                // dar mensaje de fallo\r\n                self.refs.listSubMarks.setState({ optionsList: [] })\r\n                alertify.alert('AUTO TIENDA', pRespSubMarksController.Mensaje, function(){\r\n                    alertify.message('Error en peticion a la base de datos');\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    armarListadoSubMarks (data = []) {\r\n        let arrRet = []\r\n        for (let i in data) {\r\n            arrRet.push({ value: '' + data[i].id_sub_trademark, name: data[i].id_sub_trademark, tag: data[i].name_sub_trademark })\r\n        }\r\n        return arrRet\r\n    }\r\n\r\n    guardarVehiculo () {\r\n        // console.log('guardarMarca', this.refs)\r\n        let self = this\r\n        let validador = self.validadorCampos()\r\n        if (validador.correcto) {\r\n            // esta llenado correcto\r\n            let datos = {\r\n                idSubMarca: self.refs.listSubMarks.state.value,\r\n                color: self.refs.listColors.state.value,\r\n                precioU: parseFloat(self.refs.precioU.state.value),\r\n                placa: self.refs.placa.state.value,\r\n                chasis: self.refs.chasis.state.value,\r\n                anio: parseInt(self.refs.anio.state.value)\r\n            }\r\n            alertify.confirm('AUTO TIENDA', 'Guardar Vehiculo?',\r\n                function(){\r\n                    GUARDAR(datos).then(function(pRespSaveController) {\r\n                        if (pRespSaveController.Correcto) {\r\n                            self.vaciarCampos()\r\n                            self.obtenerVehiculos()\r\n                            alertify.success('El registro fue exitoso')\r\n                        } else {\r\n                            alertify.error(pRespSaveController.Mensaje)\r\n                        }\r\n                    })\r\n                },\r\n                function(){ alertify.error('Cancelo guardar')});\r\n        } else {\r\n            // lanzar alerta\r\n            alertify.warning(validador.mensaje)\r\n        }\r\n    }\r\n\r\n    vaciarCampos (actionButton = false) {\r\n        let self = this\r\n        self.refs.listSubMarks.setState({ value: '' })\r\n        self.refs.listColors.setState({ value: '' })\r\n        self.refs.precioU.setState({ value: EntityView.PrecioUnitario.defaultValue })\r\n        self.refs.placa.setState({ value: '' })\r\n        self.refs.chasis.setState({ value: '' })\r\n        self.refs.anio.setState({ value: EntityView.AnioModelo.defaultValue })\r\n        // self.refs.imgVehicle.setState({ value: '' })\r\n        if (actionButton) {\r\n            alertify.warning('Se vaciaron los campos')\r\n        }\r\n    }\r\n\r\n    obtenerVehiculos () {\r\n        let self = this\r\n        ObtenerDatosVehiculos().then((pRespVehiclesController) => {\r\n            // console.log('pRespVehiclesController', pRespVehiclesController)\r\n            if (pRespVehiclesController.Correcto) {\r\n                self.refs.tableVehicles.setState({ data: pRespVehiclesController.listaResultado })\r\n            } else {\r\n                self.refs.tableVehicles.setState({ data: [] })\r\n                alertify.error(pRespVehiclesController.Mensaje)\r\n            }\r\n        })\r\n    }\r\n\r\n    render () {\r\n        //console.log('renderView', this)\r\n        return (\r\n            <div>\r\n                <TitleSectionField texto={EntityView.TituloSeccion}/>\r\n\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-3\">\r\n                        <SelectListField ref={'listSubMarks'}\r\n                            idField={'listSubMarks'}\r\n                            optionsList={EntityView.listaSubMarcas.optionsList}\r\n                            tagComponent={EntityView.listaSubMarcas.tagComponent} />\r\n\r\n                        <SelectListField ref={'listColors'}\r\n                            idField={'listColors'}\r\n                            optionsList={EntityView.listaColores.optionsList}\r\n                            tagComponent={EntityView.listaColores.tagComponent} />\r\n\r\n                        <NumberField ref={'precioU'}\r\n                            idField={'precioU'}\r\n                            defaultValue={EntityView.PrecioUnitario.defaultValue}\r\n                            tagComponent={EntityView.PrecioUnitario.tagComponent}\r\n                            tagValue={EntityView.PrecioUnitario.tagValue} />\r\n\r\n                        <TextField ref={'placa'}\r\n                            idField={'placa'}\r\n                            tagComponent={EntityView.PlacaControl.tagComponent}\r\n                            placeholder={EntityView.PlacaControl.placeholder}\r\n                            isRequired={EntityView.PlacaControl.isRequired} />\r\n\r\n                        <TextField ref={'chasis'}\r\n                            idField={'chasis'}\r\n                            tagComponent={EntityView.Chasis.tagComponent}\r\n                            placeholder={EntityView.Chasis.placeholder}\r\n                            isRequired={EntityView.Chasis.isRequired} />\r\n\r\n                        <NumberField ref={'anio'}\r\n                            idField={'anio'}\r\n                            defaultValue={EntityView.AnioModelo.defaultValue}\r\n                            tagComponent={EntityView.AnioModelo.tagComponent}\r\n                            tagValue={EntityView.AnioModelo.tagValue} />\r\n\r\n                        {/*\r\n                            <FileImgField ref={'imgVehicle'}\r\n                                tagComponent={'Seleccione una imagen de vehiculo'} />\r\n                        */}\r\n\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-6\">\r\n                                <ButtonField ref={'btnGuardarVehi'}\r\n                                    type={EntityView.btnGuardarVehicle.type}\r\n                                    texto={EntityView.btnGuardarVehicle.texto}\r\n                                    onClick={this.guardarVehiculo} />\r\n                            </div>\r\n                            <div className=\"col-md-6\">\r\n                                <ButtonField ref={'btnCancelarVehi'}\r\n                                    type={EntityView.btnCancelarVehicle.type}\r\n                                    texto={EntityView.btnCancelarVehicle.texto}\r\n                                    onClick={() => this.vaciarCampos(true)} />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"col-md-9\">\r\n                        <TableField ref={'tableVehicles'}\r\n                            tagComponent={EntityView.tableVehiculos.tagComponent}\r\n                            head={EntityView.tableVehiculos.head}\r\n                            data={EntityView.tableVehiculos.data}\r\n                            identificador={'id_vehicle'} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\nexport default View","/**\r\n * Created by Williams on 8/3/2020.\r\n */\r\nimport View from './VehiclesView.js'\r\nexport default View","/**\r\n * Created by Williams on 8/3/2020.\r\n */\r\nexport default class Model {\r\n    constructor () {\r\n\r\n    }\r\n\r\n    obtenerListaMarcas () {\r\n        let consulta = ' SELECT id_trademark, name_trademark FROM trademark '\r\n        return consulta\r\n    }\r\n\r\n    obtenerListaSubMarcas () {\r\n        let consulta = ' SELECT st.id_sub_trademark, t.id_trademark, t.name_trademark, st.name_sub_trademark, ' +\r\n            ' st.capacidad, st.cilindrada ' +\r\n            ' FROM subtrademark st ' +\r\n            ' INNER JOIN trademark t ON (st.id_trademark = t.id_trademark)'\r\n        return consulta\r\n    }\r\n\r\n    insertarRegistroMarca (data) {\r\n        // console.log('insertarRegistroMarca', data)\r\n        data.marca = parseInt(data.marca)\r\n        data.capacidad = parseInt(data.capacidad)\r\n        data.cilindros = data.cilindros + 'c.c.'\r\n        let consulta = ' INSERT INTO subtrademark (id_sub_trademark, id_trademark, name_sub_trademark, capacidad,' +\r\n            ' motor, cilindrada) ' +\r\n            ' VALUES ( ' +\r\n            `'` +  data.idSubMark + `', ` +\r\n            data.marca + `, ` +\r\n            `'` + data.nombre + `', ` +\r\n            data.capacidad + `, ` +\r\n            `'` + data.motor + `', ` +\r\n            `'` + data.cilindros + `'` +\r\n            ' ) '\r\n        return consulta\r\n    }\r\n}","/**\r\n * Created by Williams on 8/3/2020.\r\n */\r\nimport GestorServices from './../../services/GestorServices.js'\r\nimport Model from './SubTrademarkModel.js'\r\n\r\nvar uuid = require('uuid')\r\n\r\nexport function GUARDAR (data = null) {\r\n    // console.log('GUARDARCONTROLLER', data)\r\n    let gestorServices = new GestorServices()\r\n    let Modelo = new Model()\r\n    data.idSubMark = uuid.v4()\r\n    let insertQuery = Modelo.insertarRegistroMarca(data)\r\n\r\n    return new Promise((resolve, reject) => {\r\n        gestorServices.ExecuteSimpleQuery(insertQuery, 'insertar').then((pRespDBSave) => {\r\n            if (pRespDBSave.correcto) {\r\n                resolve({\r\n                    Correcto: true,\r\n                    Mensaje: pRespDBSave.mensaje,\r\n                    listaResultado: pRespDBSave.listaResultado\r\n                })\r\n            } else {\r\n                resolve({\r\n                    Correcto: false,\r\n                    Mensaje: pRespDBSave.mensaje,\r\n                    listaResultado: []\r\n                })\r\n            }\r\n        })\r\n    })\r\n}\r\n\r\nexport function ObtenerListaMarcas () {\r\n    let gestorServices = new GestorServices()\r\n    let Modelo = new Model()\r\n    let consulta = Modelo.obtenerListaMarcas()\r\n\r\n    return new Promise((resolve, reject) => {\r\n        gestorServices.ExecuteSimpleQuery(consulta)\r\n            .then((pRespMarcas) => {\r\n                if (pRespMarcas.correcto) {\r\n                    resolve({\r\n                        Correcto: true,\r\n                        Mensaje: pRespMarcas.mensaje,\r\n                        listaResultado: pRespMarcas.listaResultado\r\n                    })\r\n                } else {\r\n                    resolve({\r\n                        Correcto: false,\r\n                        Mensaje: pRespMarcas.mensaje,\r\n                        listaResultado: []\r\n                    })\r\n                }\r\n            })\r\n    })\r\n}\r\n\r\nexport  function ObtenerListaSubMarcas () {\r\n    let gestorServices = new GestorServices()\r\n    let Modelo = new Model()\r\n    let consulta = Modelo.obtenerListaSubMarcas()\r\n\r\n    return new Promise((resolve, reject) => {\r\n        gestorServices.ExecuteSimpleQuery(consulta).then((pRespSTDB) => {\r\n            if (pRespSTDB.correcto) {\r\n                resolve({\r\n                    Correcto: true,\r\n                    Mensaje: pRespSTDB.mensaje,\r\n                    listaResultado: pRespSTDB.listaResultado\r\n                })\r\n            } else {\r\n                resolve({\r\n                    Correcto: false,\r\n                    Mensaje: pRespSTDB.mensaje,\r\n                    listaResultado: []\r\n                })\r\n            }\r\n        })\r\n    })\r\n}","/**\r\n * Created by Williams on 8/3/2020.\r\n */\r\nimport React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport alertify from 'alertifyjs'\r\n//Seccion que carga el archivo que realiza los estilos\r\nimport './SubTrademark.scss'\r\n\r\n//Seccion para instanciar gestores e importar funciones del controller\r\nimport {\r\n    GUARDAR,\r\n    ObtenerListaMarcas,\r\n    ObtenerListaSubMarcas\r\n} from './SubTrademarkController.js'\r\n\r\n//Seccion para importar componentes\r\nimport TitleSectionField from './../../components/TitleSeccionField/TitleSectionField.js'\r\nimport SelectListField from './../../components/SelectListField/SelectListField.js'\r\nimport TextField from './../../components/TextField/TextField.js'\r\nimport NumberField from './../../components/NumberField/NumberField.js'\r\nimport ButtonField from './../../components/ButtonField/ButtonField.js'\r\nimport TableField from './../../components/TableField/TableField.js'\r\n\r\n//Seccion para importar la funcion que retorna la entidad del view\r\nimport { obtenerEntidadForView } from './../../data/EntitiesView.js'\r\n//constante que treara el objeto entidad para esta vista, para mandar a los props de los componentes\r\nconst EntityView = obtenerEntidadForView('SeccionMarcas')\r\n\r\nclass View extends Component {\r\n\r\n    static propTypes = {\r\n\r\n    }\r\n\r\n    constructor (props) {\r\n        // console.log('constructorView')\r\n        super(props)\r\n\r\n        // bindeo para funciones y metodos\r\n        this.validadorCampos = this.validadorCampos.bind(this)\r\n        this.guardarMarca = this.guardarMarca.bind(this)\r\n        this.obtenerMarcas = this.obtenerMarcas.bind(this)\r\n        this.armarListadoMarks = this.armarListadoMarks.bind(this)\r\n        this.vaciarCampos = this.vaciarCampos.bind(this)\r\n    }\r\n\r\n    static defaultProps = {\r\n\r\n    }\r\n\r\n    componentWillMount(){\r\n        //console.log('componentWillMountView')\r\n    }\r\n\r\n    componentDidMount(){\r\n        //console.log('componentDidMountView')\r\n        let self = this\r\n        self.obtenerMarcas()\r\n        self.obtenerSubmarcas()\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState){\r\n        //console.log('shouldComponentUpdateView', nextProps, nextState)\r\n        return true\r\n    }\r\n\r\n    componentWillUpdate(nextProps, nextState){\r\n        //console.log('componentWillUpdateView', nextProps, nextState)\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState){\r\n        //console.log('componentDidUpdateView', prevProps, prevState)\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        //console.log('componentWillUnmountView')\r\n    }\r\n\r\n    obtenerMarcas () {\r\n        let self = this\r\n        ObtenerListaMarcas().then((pRespMarcasController) => {\r\n            // console.log('pRespMarcasController', pRespMarcasController)\r\n            if (pRespMarcasController.Correcto) {\r\n                let listaMarcas = self.armarListadoMarks(pRespMarcasController.listaResultado)\r\n                    self.refs.listMarks.setState({ optionsList: listaMarcas })\r\n            } else {\r\n                // dar mensaje de fallo\r\n                self.refs.listMarks.setState({ optionsList: [] })\r\n                alertify.alert('AUTO TIENDA', pRespMarcasController.Mensaje, function(){\r\n                    alertify.message('Error en peticion a la base de datos');\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    obtenerSubmarcas () {\r\n        let self = this\r\n        ObtenerListaSubMarcas().then(function(pRespSTControl) {\r\n            // console.log('pRespSTControl', pRespSTControl)\r\n            if (pRespSTControl.Correcto) {\r\n                self.refs.tablaMarcas.setState({ data: pRespSTControl.listaResultado })\r\n            } else {\r\n                self.refs.tablaMarcas.setState({ data: [] })\r\n                alertify.error(pRespSTControl.Mensaje)\r\n            }\r\n        })\r\n    }\r\n\r\n    vaciarCampos (actionButton = false) {\r\n        let self = this\r\n        self.refs.listMarks.setState({ value: '' })\r\n        self.refs.name.setState({ value: '' })\r\n        self.refs.capacity.setState({ value: EntityView.Capacidad.defaultValue })\r\n        self.refs.motor.setState({ value: '' })\r\n        self.refs.cilin.setState({ value: EntityView.Cilindrada.defaultValue })\r\n        if (actionButton) {\r\n            alertify.warning('Se vaciaron los campos')\r\n        }\r\n    }\r\n\r\n    guardarMarca () {\r\n        console.log('guardarMarca', this.refs)\r\n        let self = this\r\n        let validador = self.validadorCampos()\r\n        if (validador.correcto) {\r\n            // esta llenado correcto\r\n            let datos = {\r\n                marca: self.refs.listMarks.state.value,\r\n                nombre: self.refs.name.state.value,\r\n                capacidad: self.refs.capacity.state.value,\r\n                motor: self.refs.motor.state.value,\r\n                cilindros: self.refs.cilin.state.value\r\n            }\r\n            alertify.confirm('AUTO TIENDA', 'Guardar Marca?',\r\n                function(){\r\n                    GUARDAR(datos).then(function(pRespSaveController) {\r\n                        if (pRespSaveController.Correcto) {\r\n                            self.vaciarCampos()\r\n                            self.obtenerSubmarcas()\r\n                            alertify.success('El registro fue exitoso')\r\n                        } else {\r\n                            alertify.error(pRespSaveController.Mensaje)\r\n                        }\r\n                    })\r\n                },\r\n                function(){ alertify.error('Cancelo guardar')});\r\n        } else {\r\n            // lanzar alerta\r\n            alertify.warning(validador.mensaje)\r\n        }\r\n    }\r\n\r\n    validadorCampos () {\r\n        let self = this\r\n        let refsObligatorios = ['listMarks', 'name', 'capacity', 'motor', 'cilin']\r\n        let objRetorno = {\r\n            correcto: true,\r\n            mensaje: 'llenado correcto'\r\n        }\r\n        for (let i in refsObligatorios) {\r\n            if (self.refs[refsObligatorios[i]].state.value === '' ||\r\n                self.refs[refsObligatorios[i]].state.value === undefined ||\r\n                self.refs[refsObligatorios[i]].state.value === null) {\r\n                objRetorno.correcto = false\r\n                objRetorno.mensaje = 'Debe llenar el campo: ' + self.refs[refsObligatorios[i]].state.tagComponent\r\n                break\r\n            }\r\n        }\r\n        return objRetorno\r\n    }\r\n\r\n    armarListadoMarks (data = []) {\r\n        let arrRet = []\r\n        for (let i in data) {\r\n            arrRet.push({ value: '' + data[i].id_trademark, name: data[i].id_trademark, tag: data[i].name_trademark })\r\n        }\r\n        return arrRet\r\n    }\r\n\r\n    render () {\r\n        // console.log('renderView', this, EntityView)\r\n        return (\r\n            <div>\r\n                <TitleSectionField texto={EntityView.TituloSeccion}/>\r\n\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-4\">\r\n                        <SelectListField ref={'listMarks'}\r\n                            idField={'listMarks'}\r\n                            optionsList={EntityView.listaMarcas.optionsList}\r\n                            tagComponent={EntityView.listaMarcas.tagComponent} />\r\n\r\n                        <TextField ref={'name'}\r\n                            idField={'name'}\r\n                            tagComponent={EntityView.NombreMarca.tagComponent}\r\n                            placeholder={EntityView.NombreMarca.placeholder}\r\n                            isRequired={EntityView.NombreMarca.isRequired} />\r\n\r\n                        <NumberField ref={'capacity'}\r\n                            idField={'capacity'}\r\n                            defaultValue={EntityView.Capacidad.defaultValue}\r\n                            tagComponent={EntityView.Capacidad.tagComponent}\r\n                            tagValue={EntityView.Capacidad.tagValue} />\r\n\r\n                        <TextField ref={'motor'}\r\n                            idField={'motor'}\r\n                            tagComponent={EntityView.Motor.tagComponent}\r\n                            placeholder={EntityView.Motor.placeholder}\r\n                            isRequired={EntityView.Motor.isRequired} />\r\n\r\n                        <NumberField ref={'cilin'}\r\n                            idField={'cilin'}\r\n                            defaultValue={EntityView.Cilindrada.defaultValue}\r\n                            tagComponent={EntityView.Cilindrada.tagComponent}\r\n                            tagValue={EntityView.Cilindrada.tagValue} />\r\n\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-6\">\r\n                                <ButtonField ref={'btnGuardar'}\r\n                                    type={EntityView.btnGuardar.type}\r\n                                    texto={EntityView.btnGuardar.texto}\r\n                                    onClick={this.guardarMarca} />\r\n                            </div>\r\n                            <div className=\"col-md-6\">\r\n                                <ButtonField ref={'btnCancelar'}\r\n                                    type={EntityView.btnCancelar.type}\r\n                                    texto={EntityView.btnCancelar.texto}\r\n                                    onClick={() => this.vaciarCampos(true)} />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col-md-8\">\r\n                        <TableField ref={'tablaMarcas'}\r\n                            tagComponent={EntityView.tableSubMarcas.tagComponent}\r\n                            head={EntityView.tableSubMarcas.head}\r\n                            data={EntityView.tableSubMarcas.data}\r\n                            identificador={'id_sub_trademark'} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default View","/**\r\n * Created by Williams on 8/3/2020.\r\n */\r\nimport View from './SubTrademarkView.js'\r\nexport default View","/**\r\n * Created by Williams on 26/3/2020.\r\n */\r\nexport default class Model {\r\n    constructor () {\r\n\r\n    }\r\n\r\n    ObtenerPorCredito (tipo) {\r\n        let consulta = ' SELECT T.name_trademark, ST.name_sub_trademark, V.anio, V.precio_unitario '\r\n        if (tipo === 'credito') {\r\n            consulta += ', Q.initial_amount, Q.time_loan, Q.month_amount'\r\n        }\r\n            consulta += ' FROM quote Q ' +\r\n            ' INNER JOIN vehicle V ON V.id_vehicle = Q.id_vehicle ' +\r\n            ' INNER JOIN subtrademark ST ON ST.id_sub_trademark = V.id_sub_trademark ' +\r\n            ' INNER JOIN trademark T ON T.id_trademark = ST.id_trademark '\r\n        if (tipo === 'credito') {\r\n            consulta += ' WHERE Q.type = ' + `'` + 'Credito' + `'`\r\n        } else if (tipo === 'contado') {\r\n            consulta += ' WHERE Q.type = ' + `'` + 'Contado' + `'`\r\n        }\r\n        return consulta\r\n    }\r\n\r\n    ArmarConsulta () {\r\n        let consulta = ''\r\n        return consulta\r\n    }\r\n}","/**\r\n * Created by Williams on 26/3/2020.\r\n */\r\nimport GestorServices from './../../services/GestorServices.js'\r\nimport Model from './QuotesModel.js'\r\n\r\nvar uuid = require('uuid')\r\n\r\nexport function GUARDAR (val = '') {\r\n    let id = uuid.v4()\r\n    return new Promise((resolve, reject) => {\r\n        resolve({\r\n            mensaje: val\r\n        })\r\n    })\r\n}\r\n\r\nexport function ObtenerListaCredito (tipo = 'todos') {\r\n    // console.log('ObtenerListaCredito', tipo)\r\n    let gestorServices = new GestorServices()\r\n    let Modelo = new Model()\r\n    let Consulta = Modelo.ObtenerPorCredito(tipo)\r\n\r\n    return new Promise((resolve, reject) => {\r\n        gestorServices.ExecuteSimpleQuery(Consulta).then((pRespDBCredito) => {\r\n            // console.log('pRespDBCredito', pRespDBCredito)\r\n            if (pRespDBCredito.correcto) {\r\n                resolve({\r\n                    Correcto: true,\r\n                    Mensaje: pRespDBCredito.mensaje,\r\n                    listaResultado: pRespDBCredito.listaResultado\r\n                })\r\n            } else {\r\n                resolve({\r\n                    Correcto: false,\r\n                    Mensaje: pRespDBCredito.mensaje,\r\n                    listaResultado: []\r\n                })\r\n            }\r\n        })\r\n    })\r\n}\r\n","/**\r\n * Created by Williams on 26/3/2020.\r\n */\r\nimport React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport alertify from 'alertifyjs'\r\n//Seccion que carga el archivo que realiza los estilos\r\nimport './Quotes.scss'\r\n\r\n//Seccion para instanciar gestores e importar funciones del controller\r\nimport {\r\n    GUARDAR,\r\n    ObtenerListaCredito\r\n} from './QuotesController.js'\r\n\r\n//Seccion para importar componentes\r\nimport TitleSectionField from './../../components/TitleSeccionField/TitleSectionField.js'\r\nimport RadioButtonField from './../../components/RadioButtonField/RadioButtonField.js'\r\nimport TableField from './../../components/TableField/TableField.js'\r\n\r\n//Seccion para importar la funcion que retorna la entidad del view\r\nimport { obtenerEntidadForView } from './../../data/EntitiesView.js'\r\nimport { ConfigServicesReports } from './../../services/ConfigServices.js'\r\n//constante que treara el objeto entidad para esta vista, para mandar a los props de los componentes\r\nconst EntityView = obtenerEntidadForView('SeccionCotizaciones')\r\n\r\nclass View extends Component {\r\n\r\n    static propTypes = {\r\n        typeReport: PropTypes.string\r\n    }\r\n\r\n    constructor (props) {\r\n        // console.log('constructorView')\r\n        super(props)\r\n        this.state = {\r\n            typeReport: this.props.typeReport\r\n        }\r\n\r\n        // bindeo para funciones y metodos\r\n        this.obtenerListaCredito = this.obtenerListaCredito.bind(this)\r\n        this.onClickTipo = this.onClickTipo.bind(this)\r\n    }\r\n\r\n    static defaultProps = {\r\n        typeReport: 'todos'\r\n    }\r\n\r\n    componentWillMount(){\r\n        //console.log('componentWillMountView')\r\n    }\r\n\r\n    componentDidMount(){\r\n        //console.log('componentDidMountView')\r\n        let self = this\r\n        this.setState({ typeReport: this.refs.tipoQuote.state.value })\r\n        self.obtenerListaCredito()\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState){\r\n        //console.log('shouldComponentUpdateView', nextProps, nextState)\r\n        return true\r\n    }\r\n\r\n    componentWillUpdate(nextProps, nextState){\r\n        //console.log('componentWillUpdateView', nextProps, nextState)\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState){\r\n        //console.log('componentDidUpdateView', prevProps, prevState)\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        //console.log('componentWillUnmountView')\r\n    }\r\n\r\n    obtenerListaCredito (tipo = 'todos') {\r\n        // console.log('obtenerListaCredito')\r\n        let self = this\r\n        ObtenerListaCredito(tipo).then((pRespControllerCredito) => {\r\n            // console.log('pRespControllerCredito', pRespControllerCredito)\r\n            if (pRespControllerCredito.Correcto) {\r\n                self.refs.dataQuotes.setState({ data: pRespControllerCredito.listaResultado })\r\n                if (tipo === 'credito') {\r\n                    self.refs.dataQuotes.setState({\r\n                        head: ['Nombre Marca', 'Nombre Modelo', 'A\\u00F1o', 'Precio', 'Capital Amortizado',\r\n                            'Tiempo Plazo', 'Cuota mensual']\r\n                    })\r\n                } else {\r\n                    self.refs.dataQuotes.setState({ head: EntityView.TableQuotes.head })\r\n                }\r\n            } else {\r\n                self.refs.dataQuotes.setState({ data: [], head: [] })\r\n                alertify.alert('AUTO TIENDA', pRespControllerCredito.Mensaje, function(){\r\n                    alertify.message('Error en peticion a la base de datos');\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    onClickTipo (val) {\r\n        // console.log('onClickTipo', val)\r\n        let self = this\r\n        this.setState({ typeReport: val })\r\n        self.obtenerListaCredito(val)\r\n    }\r\n\r\n    render () {\r\n        //console.log('renderView', this)\r\n        let urlReport = ConfigServicesReports() +\r\n            'CreatorQuotesReport.php?type=' +\r\n            this.state.typeReport\r\n        // console.log('urlReport', urlReport, this.state)\r\n        return (\r\n            <div>\r\n                <TitleSectionField texto={EntityView.TituloSeccion} />\r\n\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-8\">\r\n                        <RadioButtonField ref={'tipoQuote'}\r\n                            tagComponent={EntityView.TipoVenta.tagComponent}\r\n                            radiosList={EntityView.TipoVenta.radiosList}\r\n                            onClickRadio={this.onClickTipo} />\r\n                    </div>\r\n                    <div className=\"col-md-4\">\r\n                        <a href={urlReport} className=\"btn btn-primary btn-sm\">\r\n                            Generar Reporte <span className=\"glyphicon glyphicon-file\"></span>\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n\r\n                <TableField ref={'dataQuotes'}\r\n                    tagComponent={EntityView.TableQuotes.tagComponent}\r\n                    head={EntityView.TableQuotes.head}\r\n                    data={[]} />\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\nexport default View","//Seccion para hacer importaciones de las vistas\r\nimport Home from './Home/'\r\nimport Test from './Test/'\r\nimport Vehicles from './Vehicles/'\r\nimport SubTrademark from './SubTrademark/'\r\nimport Quotes from './Quotes/'\r\n\r\n// Seccion que contruye el array para Router de REACT\r\nconst routes = [\r\n    { path: '/', component: Home },\r\n    { path: '/test', component: Test },\r\n    { path: '/vehiculos', component: Vehicles },\r\n    { path: '/marcas', component: SubTrademark },\r\n    { path: '/quotes', component: Quotes }\r\n]\r\nexport default routes","/**\r\n * Created by Williams on 9/3/2020.\r\n */\r\nimport React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {\r\n    Link,\r\n    HashRouter\r\n} from 'react-router-dom'\r\n\r\n//Seccion que importa los estilos del componente\r\nimport './MenuBar.scss'\r\n\r\nclass MiComponente extends Component {\r\n\r\n    static propTypes = {\r\n        showItemsNav: PropTypes.bool,\r\n        showItemsReports: PropTypes.bool,\r\n        showItemsSales: PropTypes.bool\r\n    }\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            showItemsNav: this.props.showItemsNav,\r\n            showItemsReports: this.props.showItemsReports,\r\n            showItemsSales: this.props.showItemsSales\r\n        }\r\n        this.toggleNav = this.toggleNav.bind(this)\r\n        this.toggleReports = this.toggleReports.bind(this)\r\n        this.toogleSale = this.toogleSale.bind(this)\r\n    }\r\n\r\n    static defaultProps = {\r\n        showItemsNav: false,\r\n        showItemsReports: false,\r\n        showItemsSales: false\r\n    }\r\n\r\n    componentWillMount(){\r\n        //console.log('componentWillMountComponent')\r\n    }\r\n\r\n    componentDidMount(){\r\n        //console.log('componentDidMountComponent')\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps){\r\n        //console.log('componentWillReceiveProps', nextProps)\r\n        if (nextProps.visible !== null) {\r\n            if (nextProps.visible) {\r\n                this.setState({ visible: true })\r\n            } else {\r\n                this.setState({ visible: false })\r\n            }\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState){\r\n        //console.log('shouldComponentUpdateComponent', nextProps, nextState)\r\n        return true\r\n    }\r\n\r\n    componentWillUpdate(nextProps, nextState){\r\n        //console.log('componentWillUpdateComponent', nextProps, nextState)\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState){\r\n        //console.log('componentDidUpdateComponent', prevProps, prevState)\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        //console.log('componentWillUnmountComponent')\r\n    }\r\n\r\n    toggleNav() {\r\n        this.setState({\r\n            showItemsNav: !this.state.showItemsNav\r\n        })\r\n    }\r\n\r\n    toggleReports () {\r\n        this.setState({\r\n            showItemsReports: !this.state.showItemsReports\r\n        })\r\n    }\r\n\r\n    toogleSale () {\r\n        this.setState({\r\n            showItemsSales: !this.state.showItemsSales\r\n        })\r\n    }\r\n\r\n    render () {\r\n        // console.log('renderComponent')\r\n        var { showItemsNav, showItemsReports, showItemsSales } = this.state\r\n        return(\r\n            <div id=\"container-navigation\" className=\"dropdown-cont\">\r\n                <HashRouter>\r\n                    <nav>\r\n                        <span id=\"nav-titlte\">AUTO TIENDA</span>\r\n                        <ul>\r\n                            <li>\r\n                                <span><Link className=\"gen-item\" to=\"/\">Home</Link></span>\r\n                            </li>\r\n                            <li>\r\n                                {/*<span><Link className=\"gen-item\" to=\"/test\">Test</Link></span>*/}\r\n                            </li>\r\n                            <li>\r\n                                <span className=\"gen-item\">Reportes</span>\r\n                                <ul>\r\n                                    <li><span><Link className=\"gen-item\" to=\"/quotes\">Cotizaciones</Link></span></li>\r\n                                    {/*<li><span><Link className=\"gen-item\" to=\"/test\">Ventas</Link></span></li>*/}\r\n                                </ul>\r\n                            </li>\r\n                            <li>\r\n                                <span><Link className=\"gen-item\" to=\"/vehiculos\">Vehiculos</Link></span>\r\n                            </li>\r\n                            <li>\r\n                                <span><Link className=\"gen-item\" to=\"/marcas\">Nuestras Marcas</Link></span>\r\n                            </li>\r\n                            <li>\r\n                                <span><Link className=\"gen-item\" to=\"/\">Ventas</Link></span>\r\n                            </li>\r\n                        </ul>\r\n                    </nav>\r\n                </HashRouter>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default MiComponente","import React, { Component, Suspense } from 'react'\r\nimport {\r\n    Route,\r\n    BrowserRouter as Router,\r\n    Link,\r\n    Redirect,\r\n    Switch,\r\n    HashRouter\r\n} from 'react-router-dom'\r\nimport Error404 from './Error404/Error404.js'\r\nimport routes from './routes.js'\r\nimport MenuBar from './../components/MenuBar/MenuBar.js'\r\n\r\nclass App extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n\r\n    loading () {\r\n        return(\r\n            <div>Cargando...</div>\r\n        )\r\n    }\r\n\r\n    render () {\r\n        // console.log('RenderApp', this, window, window.ConfigApp, routes)\r\n        // console.log('resolution', window.screen.width)\r\n        // console.log('resolution', window.screen.height)\r\n        var topToMenu = '60px'\r\n        if (window.screen.width <= 480) {\r\n            topToMenu = '120px'\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                 <header>\r\n                     <MenuBar />\r\n                 </header>\r\n                <HashRouter>\r\n                    <main style={{margin: topToMenu + ' 1% 20px 1%'}}>\r\n                        <Suspense fallback={this.loading()}>\r\n                            <Switch>\r\n                                {\r\n                                    routes.map((route, idRoute) => {\r\n                                        return route.component ? (\r\n                                            <Route key={idRoute}\r\n                                                   exact path={route.path}\r\n                                                   exact component={route.component} />\r\n                                        )\r\n                                            : (null)\r\n                                    })\r\n                                }\r\n                                <Route component={Error404} />\r\n                            </Switch>\r\n                        </Suspense>\r\n\r\n                    </main>\r\n                </HashRouter>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './routes/';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst MAIN_NODE = document.getElementById('global_container')\n\nReactDOM.render(\n    <App />,\n    MAIN_NODE\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}